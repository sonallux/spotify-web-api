apiDocumentationUrl: https://developer.spotify.com/documentation/web-api/reference
endpointUrl: https://api.spotify.com/v1
objects:
  AlbumObject:
    name: AlbumObject
    id: object-albumobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-albumobject
    properties:
    - name: album_type
      type: String
      description: The type of the album.
    - name: artists
      type: "Array[ArtistObject]"
      description: The artists of the album. Each artist object includes a link in
        `href` to more detailed information about the artist.
    - name: available_markets
      type: "Array[String]"
      description: "The markets in which the album is available: [ISO 3166-1 alpha-2\
        \ country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that\
        \ an album is considered available in a market when at least one of its tracks\
        \ is available in that market."
    - name: copyrights
      type: "Array[CopyrightObject]"
      description: The copyright statements of the album.
    - name: external_ids
      type: ExternalIdObject
      description: Known external IDs for the album.
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this album.
    - name: genres
      type: "Array[String]"
      description: "A list of the genres used to classify the album. (If not yet classified,\
        \ the array is empty.)"
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the album.
    - name: id
      type: String
      description: The Spotify ID for the album.
    - name: images
      type: "Array[ImageObject]"
      description: "The cover art for the album in various sizes, widest first."
    - name: label
      type: String
      description: The label for the album.
    - name: name
      type: String
      description: "The name of the album. In case of an album takedown, the value\
        \ may be an empty string."
    - name: popularity
      type: Integer
      description: "The popularity of the album, with 100 being the most popular.\
        \ The popularity is calculated from the popularity of the album's individual\
        \ tracks."
    - name: release_date
      type: String
      description: "The date the album was first released. Depending on the precision,\
        \ it might be shown as \"1981\" or \"1981-12\"."
    - name: release_date_precision
      type: String
      description: The precision with which release_date value is known.
    - name: restrictions
      type: AlbumRestrictionObject
      description: "Included in the response when a content restriction is applied.\
        \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject)\
        \ for more details."
    - name: total_tracks
      type: Integer
      description: The total number of tracks in the album.
    - name: tracks
      type: "PagingObject[SimplifiedTrackObject]"
      description: The tracks of the album.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: The Spotify URI for the album.
  AlbumRestrictionObject:
    name: AlbumRestrictionObject
    id: object-albumrestrictionobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject
    properties:
    - name: reason
      type: String
      description: "The reason for the restriction. Albums may be restricted if the\
        \ content is not available in a given market, to the user's subscription type,\
        \ or when the user's account is set to not play explicit content. Additional\
        \ reasons may be added in the future."
  AlbumsObject:
    name: AlbumsObject
    properties:
    - name: albums
      type: "Array[AlbumObject]"
      description: ""
  ArtistObject:
    name: ArtistObject
    id: object-artistobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-artistobject
    properties:
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this artist.
    - name: followers
      type: FollowersObject
      description: Information about the followers of the artist.
    - name: genres
      type: "Array[String]"
      description: "A list of the genres the artist is associated with. If not yet\
        \ classified, the array is empty."
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the artist.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the artist."
    - name: images
      type: "Array[ImageObject]"
      description: "Images of the artist in various sizes, widest first."
    - name: name
      type: String
      description: The name of the artist.
    - name: popularity
      type: Integer
      description: "The popularity of the artist. The value will be between 0 and\
        \ 100, with 100 being the most popular. The artist's popularity is calculated\
        \ from the popularity of all the artist's tracks."
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the artist."
  ArtistsObject:
    name: ArtistsObject
    properties:
    - name: artists
      type: "Array[ArtistObject]"
      description: ""
  AudioAnalysisObject:
    name: AudioAnalysisObject
    link: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#audio-analysis-object
    properties:
    - name: bars
      type: "Array[TimeIntervalObject]"
      description: "The time intervals of the bars throughout the track. A bar (or\
        \ measure) is a segment of time defined as a given number of beats. Bar offsets\
        \ also indicate downbeats, the first beat of the measure."
    - name: beats
      type: "Array[TimeIntervalObject]"
      description: "The time intervals of beats throughout the track. A beat is the\
        \ basic time unit of a piece of music; for example, each tick of a metronome.\
        \ Beats are typically multiples of tatums."
    - name: sections
      type: "Array[SectionObject]"
      description: "Sections are defined by large variations in rhythm or timbre,\
        \ e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its\
        \ own descriptions of tempo, key, mode, time_signature, and loudness."
    - name: segments
      type: "Array[SegmentObject]"
      description: "Audio segments attempts to subdivide a song into many segments,\
        \ with each segment containing a roughly consistent sound throughout its duration."
    - name: tatums
      type: "Array[TimeIntervalObject]"
      description: A tatum represents the lowest regular pulse train that a listener
        intuitively infers from the timing of perceived musical events (segments).
  AudioFeaturesArrayObject:
    name: AudioFeaturesArrayObject
    properties:
    - name: audio_features
      type: "Array[AudioFeaturesObject]"
      description: ""
  AudioFeaturesObject:
    name: AudioFeaturesObject
    id: object-audiofeaturesobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject
    properties:
    - name: acousticness
      type: Float
      description: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.
        1.0 represents high confidence the track is acoustic.
    - name: analysis_url
      type: String
      description: An HTTP URL to access the full audio analysis of this track. An
        access token is required to access this data.
    - name: danceability
      type: Float
      description: "Danceability describes how suitable a track is for dancing based\
        \ on a combination of musical elements including tempo, rhythm stability,\
        \ beat strength, and overall regularity. A value of 0.0 is least danceable\
        \ and 1.0 is most danceable."
    - name: duration_ms
      type: Integer
      description: The duration of the track in milliseconds.
    - name: energy
      type: Float
      description: "Energy is a measure from 0.0 to 1.0 and represents a perceptual\
        \ measure of intensity and activity. Typically, energetic tracks feel fast,\
        \ loud, and noisy. For example, death metal has high energy, while a Bach\
        \ prelude scores low on the scale. Perceptual features contributing to this\
        \ attribute include dynamic range, perceived loudness, timbre, onset rate,\
        \ and general entropy."
    - name: id
      type: String
      description: The Spotify ID for the track.
    - name: instrumentalness
      type: Float
      description: "Predicts whether a track contains no vocals. \"Ooh\" and \"aah\"\
        \ sounds are treated as instrumental in this context. Rap or spoken word tracks\
        \ are clearly \"vocal\". The closer the instrumentalness value is to 1.0,\
        \ the greater likelihood the track contains no vocal content. Values above\
        \ 0.5 are intended to represent instrumental tracks, but confidence is higher\
        \ as the value approaches 1.0."
    - name: key
      type: Integer
      description: "The key the track is in. Integers map to pitches using standard\
        \ [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class) . E.g.\
        \ 0 = C, 1 = C♯/D♭, 2 = D, and so on."
    - name: liveness
      type: Float
      description: Detects the presence of an audience in the recording. Higher liveness
        values represent an increased probability that the track was performed live.
        A value above 0.8 provides strong likelihood that the track is live.
    - name: loudness
      type: Float
      description: The overall loudness of a track in decibels (dB). Loudness values
        are averaged across the entire track and are useful for comparing relative
        loudness of tracks. Loudness is the quality of a sound that is the primary
        psychological correlate of physical strength (amplitude). Values typical range
        between -60 and 0 db.
    - name: mode
      type: Integer
      description: "Mode indicates the modality (major or minor) of a track, the type\
        \ of scale from which its melodic content is derived. Major is represented\
        \ by 1 and minor is 0."
    - name: speechiness
      type: Float
      description: "Speechiness detects the presence of spoken words in a track. The\
        \ more exclusively speech-like the recording (e.g. talk show, audio book,\
        \ poetry), the closer to 1.0 the attribute value. Values above 0.66 describe\
        \ tracks that are probably made entirely of spoken words. Values between 0.33\
        \ and 0.66 describe tracks that may contain both music and speech, either\
        \ in sections or layered, including such cases as rap music. Values below\
        \ 0.33 most likely represent music and other non-speech-like tracks."
    - name: tempo
      type: Float
      description: "The overall estimated tempo of a track in beats per minute (BPM).\
        \ In musical terminology, tempo is the speed or pace of a given piece and\
        \ derives directly from the average beat duration."
    - name: time_signature
      type: Integer
      description: An estimated overall time signature of a track. The time signature
        (meter) is a notational convention to specify how many beats are in each bar
        (or measure).
    - name: track_href
      type: String
      description: A link to the Web API endpoint providing full details of the track.
    - name: type
      type: String
      description: "The object type: \"audio_features\""
    - name: uri
      type: String
      description: The Spotify URI for the track.
    - name: valence
      type: Float
      description: "A measure from 0.0 to 1.0 describing the musical positiveness\
        \ conveyed by a track. Tracks with high valence sound more positive (e.g.\
        \ happy, cheerful, euphoric), while tracks with low valence sound more negative\
        \ (e.g. sad, depressed, angry)."
  CategoriesObject:
    name: CategoriesObject
    properties:
    - name: categories
      type: "PagingObject[CategoryObject]"
      description: ""
  CategoryObject:
    name: CategoryObject
    id: object-categoryobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-categoryobject
    properties:
    - name: href
      type: String
      description: A link to the Web API endpoint returning full details of the category.
    - name: icons
      type: "Array[ImageObject]"
      description: "The category icon, in various sizes."
    - name: id
      type: String
      description: "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ of the category."
    - name: name
      type: String
      description: The name of the category.
  ContextObject:
    name: ContextObject
    id: object-contextobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-contextobject
    properties:
    - name: external_urls
      type: ExternalUrlObject
      description: External URLs for this context.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the track.
    - name: type
      type: String
      description: "The object type, e.g. \"artist\", \"playlist\", \"album\", \"\
        show\"."
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the context."
  CopyrightObject:
    name: CopyrightObject
    id: object-copyrightobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-copyrightobject
    properties:
    - name: text
      type: String
      description: The copyright text for this content.
    - name: type
      type: String
      description: "The type of copyright: `C` = the copyright, `P` = the sound recording\
        \ (performance) copyright."
  CurrentlyPlayingContextObject:
    name: CurrentlyPlayingContextObject
    id: object-currentlyplayingcontextobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingcontextobject
    properties:
    - name: actions
      type: DisallowsObject
      description: Allows to update the user interface based on which playback actions
        are available within the current context.
    - name: context
      type: ContextObject
      description: A Context Object. Can be `null`.
    - name: currently_playing_type
      type: String
      description: "The object type of the currently playing item. Can be one of `track`,\
        \ `episode`, `ad` or `unknown`."
    - name: device
      type: DeviceObject
      description: The device that is currently active.
    - name: is_playing
      type: Boolean
      description: "If something is currently playing, return `true`."
    - name: item
      type: TrackObject | EpisodeObject
      description: The currently playing track or episode. Can be `null`.
    - name: progress_ms
      type: Integer
      description: Progress into the currently playing track or episode. Can be `null`.
    - name: repeat_state
      type: String
      description: "off, track, context"
    - name: shuffle_state
      type: String
      description: If shuffle is on or off.
    - name: timestamp
      type: Integer
      description: Unix Millisecond Timestamp when data was fetched.
  CurrentlyPlayingObject:
    name: CurrentlyPlayingObject
    id: object-currentlyplayingobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingobject
    properties:
    - name: context
      type: ContextObject
      description: A Context Object. Can be `null`.
    - name: currently_playing_type
      type: String
      description: "The object type of the currently playing item. Can be one of `track`,\
        \ `episode`, `ad` or `unknown`."
    - name: is_playing
      type: Boolean
      description: "If something is currently playing, return `true`."
    - name: item
      type: TrackObject | EpisodeObject
      description: The currently playing track or episode. Can be `null`.
    - name: progress_ms
      type: Integer
      description: Progress into the currently playing track or episode. Can be `null`.
    - name: timestamp
      type: Integer
      description: Unix Millisecond Timestamp when data was fetched
  CursorObject:
    name: CursorObject
    id: object-cursorobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-cursorobject
    properties:
    - name: after
      type: String
      description: The cursor to use as key to find the next page of items.
  CursorPagingObject:
    name: CursorPagingObject
    id: object-cursorpagingobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject
    properties:
    - name: cursors
      type: CursorObject
      description: The cursors used to find the next set of items.
    - name: href
      type: String
      description: A link to the Web API endpoint returning the full result of the
        request.
    - name: items
      type: "Array[Object]"
      description: The requested data.
    - name: limit
      type: Integer
      description: The maximum number of items in the response (as set in the query
        or by default).
    - name: next
      type: String
      description: URL to the next page of items. ( `null` if none)
    - name: total
      type: Integer
      description: The total number of items available to return.
  DeviceObject:
    name: DeviceObject
    id: object-deviceobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-deviceobject
    properties:
    - name: id
      type: String
      description: The device ID.
    - name: is_active
      type: Boolean
      description: If this device is the currently active device.
    - name: is_private_session
      type: Boolean
      description: If this device is currently in a private session.
    - name: is_restricted
      type: Boolean
      description: Whether controlling this device is restricted. At present if this
        is "true" then no Web API commands will be accepted by this device.
    - name: name
      type: String
      description: The name of the device.
    - name: type
      type: String
      description: "Device type, such as \"computer\", \"smartphone\" or \"speaker\"\
        ."
    - name: volume_percent
      type: Integer
      description: The current volume in percent.
  DevicesObject:
    name: DevicesObject
    id: object-devicesobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-devicesobject
    properties:
    - name: devices
      type: "Array[DeviceObject]"
      description: A list of 0..n Device objects
  DisallowsObject:
    name: DisallowsObject
    id: object-disallowsobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-disallowsobject
    properties:
    - name: interrupting_playback
      type: Boolean
      description: Interrupting playback. Optional field.
    - name: pausing
      type: Boolean
      description: Pausing. Optional field.
    - name: resuming
      type: Boolean
      description: Resuming. Optional field.
    - name: seeking
      type: Boolean
      description: Seeking playback location. Optional field.
    - name: skipping_next
      type: Boolean
      description: Skipping to the next context. Optional field.
    - name: skipping_prev
      type: Boolean
      description: Skipping to the previous context. Optional field.
    - name: toggling_repeat_context
      type: Boolean
      description: Toggling repeat context flag. Optional field.
    - name: toggling_repeat_track
      type: Boolean
      description: Toggling repeat track flag. Optional field.
    - name: toggling_shuffle
      type: Boolean
      description: Toggling shuffle flag. Optional field.
    - name: transferring_playback
      type: Boolean
      description: Transfering playback between devices. Optional field.
  EpisodeObject:
    name: EpisodeObject
    id: object-episodeobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject
    properties:
    - name: audio_preview_url
      type: String
      description: A URL to a 30 second preview (MP3 format) of the episode. `null`
        if not available.
    - name: description
      type: String
      description: "A description of the episode. HTML tags are stripped away from\
        \ this field, use `html_description` field in case HTML tags are needed."
    - name: duration_ms
      type: Integer
      description: The episode length in milliseconds.
    - name: explicit
      type: Boolean
      description: Whether or not the episode has explicit content (true = yes it
        does; false = no it does not OR unknown).
    - name: external_urls
      type: ExternalUrlObject
      description: External URLs for this episode.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the episode.
    - name: html_description
      type: String
      description: A description of the episode. This field may contain HTML tags.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the episode."
    - name: images
      type: "Array[ImageObject]"
      description: "The cover art for the episode in various sizes, widest first."
    - name: is_externally_hosted
      type: Boolean
      description: True if the episode is hosted outside of Spotify's CDN.
    - name: is_playable
      type: Boolean
      description: True if the episode is playable in the given market. Otherwise
        false.
    - name: language
      type: String
      description: "**Note: This field is deprecated and might be removed in the future.\
        \ Please use the `languages` field instead.** The language used in the episode,\
        \ identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
    - name: languages
      type: "Array[String]"
      description: "A list of the languages used in the episode, identified by their\
        \ [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
    - name: name
      type: String
      description: The name of the episode.
    - name: release_date
      type: String
      description: "The date the episode was first released, for example `\"1981-12-15\"\
        `. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"\
        `."
    - name: release_date_precision
      type: String
      description: The precision with which `release_date` value is known.
    - name: restrictions
      type: EpisodeRestrictionObject
      description: "Included in the response when a content restriction is applied.\
        \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject)\
        \ for more details."
    - name: resume_point
      type: ResumePointObject
      description: The user's most recent position in the episode. Set if the supplied
        access token is a user token and has the scope `user-read-playback-position`.
    - name: show
      type: SimplifiedShowObject
      description: The show on which the episode belongs.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the episode."
  EpisodeRestrictionObject:
    name: EpisodeRestrictionObject
    id: object-episoderestrictionobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject
    properties:
    - name: reason
      type: String
      description: "The reason for the restriction. Supported values:  \n\n- `market`\
        \ - The content item is not available in the given market.  \n- `product`\
        \ - The content item is not available for the user's subscription type.  \n\
        - `explicit` - The content item is explicit and the user's account is set\
        \ to not play explicit content.  \n  Additional reasons may be added in the\
        \ future. **Note**: If you use this field, make sure that your application\
        \ safely handles unknown values."
  EpisodesObject:
    name: EpisodesObject
    properties:
    - name: episodes
      type: "Array[EpisodeObject]"
      description: ""
  ErrorObject:
    name: ErrorObject
    id: object-errorobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-errorobject
    properties:
    - name: message
      type: String
      description: A short description of the cause of the error.
    - name: status
      type: Integer
      description: "The HTTP status code (also returned in the response header; see\
        \ [Response Status Codes](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
        \ for more information)."
  ErrorResponseObject:
    name: ErrorResponseObject
    properties:
    - name: error
      type: ErrorObject
      description: ""
  ExplicitContentSettingsObject:
    name: ExplicitContentSettingsObject
    id: object-explicitcontentsettingsobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-explicitcontentsettingsobject
    properties:
    - name: filter_enabled
      type: Boolean
      description: "When `true`, indicates that explicit content should not be played."
    - name: filter_locked
      type: Boolean
      description: "When `true`, indicates that the explicit content setting is locked\
        \ and can't be changed by the user."
  ExternalIdObject:
    name: ExternalIdObject
    id: object-externalidobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-externalidobject
    properties:
    - name: ean
      type: String
      description: "[International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)"
    - name: isrc
      type: String
      description: "[International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)"
    - name: upc
      type: String
      description: "[Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)"
  ExternalUrlObject:
    name: ExternalUrlObject
    id: object-externalurlobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject
    properties:
    - name: spotify
      type: String
      description: "The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the object."
  FeaturedPlaylistObject:
    name: FeaturedPlaylistObject
    properties:
    - name: message
      type: String
      description: ""
    - name: playlists
      type: "PagingObject[SimplifiedPlaylistObject]"
      description: ""
  FollowersObject:
    name: FollowersObject
    id: object-followersobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-followersobject
    properties:
    - name: href
      type: String
      description: "A link to the Web API endpoint providing full details of the followers;\
        \ `null` if not available. Please note that this will always be set to null,\
        \ as the Web API does not support it at the moment."
    - name: total
      type: Integer
      description: The total number of followers.
  FollowingArtistsObject:
    name: FollowingArtistsObject
    properties:
    - name: artists
      type: "CursorPagingObject[ArtistObject]"
      description: ""
  GenreSeedsObject:
    name: GenreSeedsObject
    properties:
    - name: genres
      type: "Array[String]"
      description: ""
  ImageObject:
    name: ImageObject
    id: object-imageobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-imageobject
    properties:
    - name: height
      type: Integer
      description: The image height in pixels.
    - name: url
      type: String
      description: The source URL of the image.
    - name: width
      type: Integer
      description: The image width in pixels.
  LinkedTrackObject:
    name: LinkedTrackObject
    id: object-linkedtrackobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-linkedtrackobject
    properties:
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this track.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the track.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the track."
    - name: type
      type: String
      description: "The object type: \"track\"."
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the track."
  MarketsObject:
    name: MarketsObject
    properties:
    - name: markets
      type: "Array[String]"
      description: ""
  NewReleasesObject:
    name: NewReleasesObject
    properties:
    - name: albums
      type: "PagingObject[SimplifiedAlbumObject]"
      description: ""
  PagingObject:
    name: PagingObject
    id: object-pagingobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject
    properties:
    - name: href
      type: String
      description: A link to the Web API endpoint returning the full result of the
        request
    - name: items
      type: "Array[Object]"
      description: The requested data.
    - name: limit
      type: Integer
      description: The maximum number of items in the response (as set in the query
        or by default).
    - name: next
      type: String
      description: URL to the next page of items. ( `null` if none)
    - name: offset
      type: Integer
      description: The offset of the items returned (as set in the query or by default)
    - name: previous
      type: String
      description: URL to the previous page of items. ( `null` if none)
    - name: total
      type: Integer
      description: The total number of items available to return.
  PlayHistoryObject:
    name: PlayHistoryObject
    id: object-playhistoryobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-playhistoryobject
    properties:
    - name: context
      type: ContextObject
      description: The context the track was played from.
    - name: played_at
      type: Timestamp
      description: The date and time the track was played.
    - name: track
      type: SimplifiedTrackObject
      description: The track the user listened to.
  PlayerErrorObject:
    name: PlayerErrorObject
    id: object-playererrorobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-playererrorobject
    properties:
    - name: message
      type: String
      description: A short description of the cause of the error.
    - name: reason
      type: String
      description: |-
        - `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.
        - `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.
        - `NO_SPECIFIC_TRACK` - The requested track does not exist.
        - `ALREADY_PAUSED` - The command requires playback to not be paused.
        - `NOT_PAUSED` - The command requires playback to be paused.
        - `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.
        - `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.
        - `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.
        - `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.
        - `CONTEXT_DISALLOW` - The command could not be performed on the context.
        - `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.
        - `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
        - `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.
        - `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.
        - `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.
        - `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.
        - `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.
        - `UNKNOWN` - Certain actions are restricted because of unknown reasons.
    - name: status
      type: Integer
      description: The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.
        Also returned in the response header.
  PlaylistObject:
    name: PlaylistObject
    id: object-playlistobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject
    properties:
    - name: collaborative
      type: Boolean
      description: '`true` if the owner allows other users to modify the playlist.'
    - name: description
      type: String
      description: "The playlist description. *Only returned for modified, verified\
        \ playlists, otherwise* `null`."
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this playlist.
    - name: followers
      type: FollowersObject
      description: Information about the followers of the playlist.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the playlist.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the playlist."
    - name: images
      type: "Array[ImageObject]"
      description: "Images for the playlist. The array may be empty or contain up\
        \ to three images. The images are returned by size in descending order. See\
        \ [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).\
        \ *Note: If returned, the source URL for the image (`url`) is temporary and\
        \ will expire in less than a day.*"
    - name: name
      type: String
      description: The name of the playlist.
    - name: owner
      type: PublicUserObject
      description: The user who owns the playlist
    - name: public
      type: Boolean
      description: "The playlist's public/private status: `true` the playlist is public,\
        \ `false` the playlist is private, `null` the playlist status is not relevant.\
        \ For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)"
    - name: snapshot_id
      type: String
      description: The version identifier for the current playlist. Can be supplied
        in other requests to target a specific playlist version
    - name: tracks
      type: "PagingObject[PlaylistTrackObject]"
      description: "Information about the tracks of the playlist. Note, a track object\
        \ may be `null`. This can happen if a track is no longer available."
    - name: type
      type: String
      description: "The object type: \"playlist\""
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the playlist."
  PlaylistPagingObject:
    name: PlaylistPagingObject
    properties:
    - name: playlists
      type: "PagingObject[SimplifiedPlaylistObject]"
      description: ""
  PlaylistTrackObject:
    name: PlaylistTrackObject
    id: object-playlisttrackobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttrackobject
    properties:
    - name: added_at
      type: Timestamp
      description: The date and time the track or episode was added. *Note that some
        very old playlists may return `null` in this field.*
    - name: added_by
      type: PublicUserObject
      description: The Spotify user who added the track or episode. *Note that some
        very old playlists may return `null` in this field.*
    - name: is_local
      type: Boolean
      description: "Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/)\
        \ or not."
    - name: track
      type: TrackObject | EpisodeObject
      description: Information about the track or episode.
  PlaylistTracksRefObject:
    name: PlaylistTracksRefObject
    id: object-playlisttracksrefobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-playlisttracksrefobject
    properties:
    - name: href
      type: String
      description: A link to the Web API endpoint where full details of the playlist's
        tracks can be retrieved.
    - name: total
      type: Integer
      description: Number of tracks in the playlist.
  PrivateUserObject:
    name: PrivateUserObject
    id: object-privateuserobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject
    properties:
    - name: country
      type: String
      description: "The country of the user, as set in the user's account profile.\
        \ An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
        \ *This field is only available when the current user has granted access to\
        \ the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
        \ scope.*"
    - name: display_name
      type: String
      description: The name displayed on the user's profile. `null` if not available.
    - name: email
      type: String
      description: "The user's email address, as entered by the user when creating\
        \ their account. ***Important!** This email address is unverified; there is\
        \ no proof that it actually belongs to the user.* *This field is only available\
        \ when the current user has granted access to the [user-read-email](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
        \ scope.*"
    - name: explicit_content
      type: ExplicitContentSettingsObject
      description: "The user's explicit content settings. *This field is only available\
        \ when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
        \ scope.*"
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this user.
    - name: followers
      type: FollowersObject
      description: Information about the followers of the user.
    - name: href
      type: String
      description: A link to the Web API endpoint for this user.
    - name: id
      type: String
      description: "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the user."
    - name: images
      type: "Array[ImageObject]"
      description: The user's profile image.
    - name: product
      type: String
      description: "The user's Spotify subscription level: \"premium\", \"free\",\
        \ etc. (The subscription level \"open\" can be considered the same as \"free\"\
        .) *This field is only available when the current user has granted access\
        \ to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
        \ scope.*"
    - name: type
      type: String
      description: "The object type: \"user\""
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the user."
  PublicUserObject:
    name: PublicUserObject
    id: object-publicuserobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject
    properties:
    - name: display_name
      type: String
      description: The name displayed on the user's profile. `null` if not available.
    - name: external_urls
      type: ExternalUrlObject
      description: Known public external URLs for this user.
    - name: followers
      type: FollowersObject
      description: Information about the followers of this user.
    - name: href
      type: String
      description: A link to the Web API endpoint for this user.
    - name: id
      type: String
      description: "The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for this user."
    - name: images
      type: "Array[ImageObject]"
      description: The user's profile image.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for this user."
  RecommendationSeedObject:
    name: RecommendationSeedObject
    id: object-recommendationseedobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject
    properties:
    - name: afterFilteringSize
      type: Integer
      description: The number of tracks available after min_\* and max_\* filters
        have been applied.
    - name: afterRelinkingSize
      type: Integer
      description: The number of tracks available after relinking for regional availability.
    - name: href
      type: String
      description: "A link to the full track or artist data for this seed. For tracks\
        \ this will be a link to a [Track Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject).\
        \ For artists a link to [an Artist Object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).\
        \ For genre seeds, this value will be `null`."
    - name: id
      type: String
      description: "The id used to select this seed. This will be the same as the\
        \ string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter."
    - name: initialPoolSize
      type: Integer
      description: The number of recommended tracks available for this seed.
    - name: type
      type: String
      description: "The entity type of this seed. One of `artist`, `track` or `genre`."
  RecommendationsObject:
    name: RecommendationsObject
    id: object-recommendationsobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-recommendationsobject
    properties:
    - name: seeds
      type: "Array[RecommendationSeedObject]"
      description: "An array of [recommendation seed objects](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject)."
    - name: tracks
      type: "Array[TrackObject]"
      description: "An array of [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\
        \ ordered according to the parameters supplied."
  ResumePointObject:
    name: ResumePointObject
    id: object-resumepointobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-resumepointobject
    properties:
    - name: fully_played
      type: Boolean
      description: Whether or not the episode has been fully played by the user.
    - name: resume_position_ms
      type: Integer
      description: The user's most recent position in the episode in milliseconds.
  SavedAlbumObject:
    name: SavedAlbumObject
    id: object-savedalbumobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject
    properties:
    - name: added_at
      type: Timestamp
      description: "The date and time the album was saved Timestamps are returned\
        \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
        \ YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time\
        \ of an album release), an additional field indicates the precision; see for\
        \ example, release_date in an album object."
    - name: album
      type: AlbumObject
      description: Information about the album.
  SavedEpisodeObject:
    name: SavedEpisodeObject
    id: object-savedepisodeobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject
    properties:
    - name: added_at
      type: Timestamp
      description: "The date and time the episode was saved. Timestamps are returned\
        \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
        \ YYYY-MM-DDTHH:MM:SSZ."
    - name: episode
      type: EpisodeObject
      description: Information about the episode.
  SavedShowObject:
    name: SavedShowObject
    id: object-savedshowobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject
    properties:
    - name: added_at
      type: Timestamp
      description: "The date and time the show was saved. Timestamps are returned\
        \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
        \ YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time\
        \ of an album release), an additional field indicates the precision; see for\
        \ example, release_date in an album object."
    - name: show
      type: SimplifiedShowObject
      description: Information about the show.
  SavedTrackObject:
    name: SavedTrackObject
    id: object-savedtrackobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject
    properties:
    - name: added_at
      type: Timestamp
      description: "The date and time the track was saved. Timestamps are returned\
        \ in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset:\
        \ YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time\
        \ of an album release), an additional field indicates the precision; see for\
        \ example, release_date in an album object."
    - name: track
      type: TrackObject
      description: Information about the track.
  SearchResponseObject:
    name: SearchResponseObject
    properties:
    - name: albums
      type: "PagingObject[SimplifiedAlbumObject]"
      description: ""
    - name: artists
      type: "PagingObject[ArtistObject]"
      description: ""
    - name: episodes
      type: "PagingObject[SimplifiedEpisodeObject]"
      description: ""
    - name: playlists
      type: "PagingObject[SimplifiedPlaylistObject]"
      description: ""
    - name: shows
      type: "PagingObject[SimplifiedShowObject]"
      description: ""
    - name: tracks
      type: "PagingObject[TrackObject]"
      description: ""
  SectionObject:
    name: SectionObject
    link: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#section-object
    properties:
    - name: confidence
      type: Float
      description: "The confidence, from 0.0 to 1.0, of the reliability of the section’\
        s \"designation\"."
    - name: duration
      type: Float
      description: The duration (in seconds) of the section.
    - name: key
      type: Integer
      description: ""
    - name: key_confidence
      type: Float
      description: ""
    - name: loudness
      type: Float
      description: The overall loudness of the section in decibels (dB). Loudness
        values are useful for comparing relative loudness of sections within tracks.
    - name: mode
      type: Integer
      description: ""
    - name: mode_confidence
      type: Float
      description: ""
    - name: start
      type: Float
      description: The starting point (in seconds) of the section.
    - name: tempo
      type: Float
      description: "The overall estimated tempo of the section in beats per minute\
        \ (BPM). In musical terminology, tempo is the speed or pace of a given piece\
        \ and derives directly from the average beat duration."
    - name: tempo_confidence
      type: Float
      description: ""
    - name: time_signature
      type: Integer
      description: ""
    - name: time_signature_confidence
      type: Float
      description: ""
  SegmentObject:
    name: SegmentObject
    link: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#segment-object
    properties:
    - name: confidence
      type: Float
      description: ""
    - name: duration
      type: Float
      description: ""
    - name: loudness_end
      type: Float
      description: ""
    - name: loudness_max
      type: Float
      description: ""
    - name: loudness_max_time
      type: Float
      description: ""
    - name: loudness_start
      type: Float
      description: ""
    - name: pitches
      type: "Array[Float]"
      description: ""
    - name: start
      type: Float
      description: ""
    - name: timbre
      type: "Array[Float]"
      description: ""
  ShowObject:
    name: ShowObject
    id: object-showobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-showobject
    properties:
    - name: available_markets
      type: "Array[String]"
      description: "A list of the countries in which the show can be played, identified\
        \ by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
        \ code."
    - name: copyrights
      type: "Array[CopyrightObject]"
      description: The copyright statements of the show.
    - name: description
      type: String
      description: "A description of the show. HTML tags are stripped away from this\
        \ field, use `html_description` field in case HTML tags are needed."
    - name: episodes
      type: "PagingObject[SimplifiedEpisodeObject]"
      description: A list of the show's episodes.
    - name: explicit
      type: Boolean
      description: Whether or not the show has explicit content (true = yes it does;
        false = no it does not OR unknown).
    - name: external_urls
      type: ExternalUrlObject
      description: External URLs for this show.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the show.
    - name: html_description
      type: String
      description: A description of the show. This field may contain HTML tags.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the show."
    - name: images
      type: "Array[ImageObject]"
      description: "The cover art for the show in various sizes, widest first."
    - name: is_externally_hosted
      type: Boolean
      description: True if all of the show's episodes are hosted outside of Spotify's
        CDN. This field might be `null` in some cases.
    - name: languages
      type: "Array[String]"
      description: "A list of the languages used in the show, identified by their\
        \ [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
    - name: media_type
      type: String
      description: The media type of the show.
    - name: name
      type: String
      description: The name of the episode.
    - name: publisher
      type: String
      description: The publisher of the show.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the show."
  ShowsObject:
    name: ShowsObject
    properties:
    - name: shows
      type: "Array[SimplifiedShowObject]"
      description: ""
  SimplifiedAlbumObject:
    name: SimplifiedAlbumObject
    id: object-simplifiedalbumobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject
    properties:
    - name: album_group
      type: String
      description: The field is present when getting an artist's albums. Compare to
        album_type this field represents relationship between the artist and the album.
    - name: album_type
      type: String
      description: The type of the album.
    - name: artists
      type: "Array[SimplifiedArtistObject]"
      description: The artists of the album. Each artist object includes a link in
        `href` to more detailed information about the artist.
    - name: available_markets
      type: "Array[String]"
      description: "The markets in which the album is available: [ISO 3166-1 alpha-2\
        \ country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that\
        \ an album is considered available in a market when at least 1 of its tracks\
        \ is available in that market."
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this album.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the album.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the album."
    - name: images
      type: "Array[ImageObject]"
      description: "The cover art for the album in various sizes, widest first."
    - name: name
      type: String
      description: "The name of the album. In case of an album takedown, the value\
        \ may be an empty string."
    - name: release_date
      type: String
      description: The date the album was first released.
    - name: release_date_precision
      type: String
      description: The precision with which `release_date` value is known.
    - name: restrictions
      type: AlbumRestrictionObject
      description: Included in the response when a content restriction is applied.
    - name: total_tracks
      type: Integer
      description: The number of tracks in the album.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the album."
  SimplifiedArtistObject:
    name: SimplifiedArtistObject
    id: object-simplifiedartistobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedartistobject
    properties:
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this artist.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the artist.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the artist."
    - name: name
      type: String
      description: The name of the artist.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the artist."
  SimplifiedEpisodeObject:
    name: SimplifiedEpisodeObject
    id: object-simplifiedepisodeobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject
    properties:
    - name: audio_preview_url
      type: String
      description: A URL to a 30 second preview (MP3 format) of the episode. `null`
        if not available.
    - name: description
      type: String
      description: "A description of the episode. HTML tags are stripped away from\
        \ this field, use `html_description` field in case HTML tags are needed."
    - name: duration_ms
      type: Integer
      description: The episode length in milliseconds.
    - name: explicit
      type: Boolean
      description: Whether or not the episode has explicit content (true = yes it
        does; false = no it does not OR unknown).
    - name: external_urls
      type: ExternalUrlObject
      description: External URLs for this episode.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the episode.
    - name: html_description
      type: String
      description: A description of the episode. This field may contain HTML tags.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the episode."
    - name: images
      type: "Array[ImageObject]"
      description: "The cover art for the episode in various sizes, widest first."
    - name: is_externally_hosted
      type: Boolean
      description: True if the episode is hosted outside of Spotify's CDN.
    - name: is_playable
      type: Boolean
      description: True if the episode is playable in the given market. Otherwise
        false.
    - name: language
      type: String
      description: "**Note: This field is deprecated and might be removed in the future.\
        \ Please use the `languages` field instead.** The language used in the episode,\
        \ identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
    - name: languages
      type: "Array[String]"
      description: "A list of the languages used in the episode, identified by their\
        \ [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
    - name: name
      type: String
      description: The name of the episode.
    - name: release_date
      type: String
      description: "The date the episode was first released, for example `\"1981-12-15\"\
        `. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"\
        `."
    - name: release_date_precision
      type: String
      description: The precision with which `release_date` value is known.
    - name: restrictions
      type: EpisodeRestrictionObject
      description: "Included in the response when a content restriction is applied.\
        \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject)\
        \ for more details."
    - name: resume_point
      type: ResumePointObject
      description: The user's most recent position in the episode. Set if the supplied
        access token is a user token and has the scope 'user-read-playback-position'.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the episode."
  SimplifiedPlaylistObject:
    name: SimplifiedPlaylistObject
    id: object-simplifiedplaylistobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject
    properties:
    - name: collaborative
      type: Boolean
      description: '`true` if the owner allows other users to modify the playlist.'
    - name: description
      type: String
      description: "The playlist description. *Only returned for modified, verified\
        \ playlists, otherwise* `null`."
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this playlist.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the playlist.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the playlist."
    - name: images
      type: "Array[ImageObject]"
      description: "Images for the playlist. The array may be empty or contain up\
        \ to three images. The images are returned by size in descending order. See\
        \ [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).\
        \ *Note: If returned, the source URL for the image (`url`) is temporary and\
        \ will expire in less than a day.*"
    - name: name
      type: String
      description: The name of the playlist.
    - name: owner
      type: PublicUserObject
      description: The user who owns the playlist
    - name: public
      type: Boolean
      description: "The playlist's public/private status: `true` the playlist is public,\
        \ `false` the playlist is private, `null` the playlist status is not relevant.\
        \ For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)"
    - name: snapshot_id
      type: String
      description: The version identifier for the current playlist. Can be supplied
        in other requests to target a specific playlist version
    - name: tracks
      type: PlaylistTracksRefObject
      description: "A collection containing a link ( `href` ) to the Web API endpoint\
        \ where full details of the playlist's tracks can be retrieved, along with\
        \ the `total` number of tracks in the playlist. Note, a track object may be\
        \ `null`. This can happen if a track is no longer available."
    - name: type
      type: String
      description: "The object type: \"playlist\""
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the playlist."
  SimplifiedShowObject:
    name: SimplifiedShowObject
    id: object-simplifiedshowobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject
    properties:
    - name: available_markets
      type: "Array[String]"
      description: "A list of the countries in which the show can be played, identified\
        \ by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
        \ code."
    - name: copyrights
      type: "Array[CopyrightObject]"
      description: The copyright statements of the show.
    - name: description
      type: String
      description: "A description of the show. HTML tags are stripped away from this\
        \ field, use `html_description` field in case HTML tags are needed."
    - name: explicit
      type: Boolean
      description: Whether or not the show has explicit content (true = yes it does;
        false = no it does not OR unknown).
    - name: external_urls
      type: ExternalUrlObject
      description: External URLs for this show.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the show.
    - name: html_description
      type: String
      description: A description of the show. This field may contain HTML tags.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the show."
    - name: images
      type: "Array[ImageObject]"
      description: "The cover art for the show in various sizes, widest first."
    - name: is_externally_hosted
      type: Boolean
      description: True if all of the show's episodes are hosted outside of Spotify's
        CDN. This field might be `null` in some cases.
    - name: languages
      type: "Array[String]"
      description: "A list of the languages used in the show, identified by their\
        \ [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code."
    - name: media_type
      type: String
      description: The media type of the show.
    - name: name
      type: String
      description: The name of the episode.
    - name: publisher
      type: String
      description: The publisher of the show.
    - name: type
      type: String
      description: The object type.
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the show."
  SimplifiedTrackObject:
    name: SimplifiedTrackObject
    id: object-simplifiedtrackobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject
    properties:
    - name: artists
      type: "Array[SimplifiedArtistObject]"
      description: The artists who performed the track. Each artist object includes
        a link in `href` to more detailed information about the artist.
    - name: available_markets
      type: "Array[String]"
      description: "A list of the countries in which the track can be played, identified\
        \ by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
        \ code."
    - name: disc_number
      type: Integer
      description: The disc number (usually `1` unless the album consists of more
        than one disc).
    - name: duration_ms
      type: Integer
      description: The track length in milliseconds.
    - name: explicit
      type: Boolean
      description: Whether or not the track has explicit lyrics ( `true` = yes it
        does; `false` = no it does not OR unknown).
    - name: external_urls
      type: ExternalUrlObject
      description: External URLs for this track.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the track.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the track."
    - name: is_local
      type: Boolean
      description: Whether or not the track is from a local file.
    - name: is_playable
      type: Boolean
      description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
        \ is applied. If `true` , the track is playable in the given market. Otherwise\
        \ `false`."
    - name: linked_from
      type: LinkedTrackObject
      description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
        \ is applied and is only part of the response if the track linking, in fact,\
        \ exists. The requested track has been replaced with a different track. The\
        \ track in the `linked_from` object contains information about the originally\
        \ requested track."
    - name: name
      type: String
      description: The name of the track.
    - name: preview_url
      type: String
      description: A URL to a 30 second preview (MP3 format) of the track.
    - name: restrictions
      type: TrackRestrictionObject
      description: "Included in the response when a content restriction is applied.\
        \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject)\
        \ for more details."
    - name: track_number
      type: Integer
      description: "The number of the track. If an album has several discs, the track\
        \ number is the number on the specified disc."
    - name: type
      type: String
      description: "The object type: \"track\"."
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the track."
  SnapshotIdObject:
    name: SnapshotIdObject
    properties:
    - name: snapshot_id
      type: String
      description: The snapshot_id can be used to identify your playlist version in
        future requests.
  TimeIntervalObject:
    name: TimeIntervalObject
    link: https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#time-interval-object
    properties:
    - name: confidence
      type: Float
      description: "The confidence, from 0.0 to 1.0, of the reliability of the interval."
    - name: duration
      type: Float
      description: The duration (in seconds) of the time interval.
    - name: start
      type: Float
      description: The starting point (in seconds) of the time interval.
  TrackObject:
    name: TrackObject
    id: object-trackobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-trackobject
    properties:
    - name: album
      type: SimplifiedAlbumObject
      description: The album on which the track appears. The album object includes
        a link in `href` to full information about the album.
    - name: artists
      type: "Array[ArtistObject]"
      description: The artists who performed the track. Each artist object includes
        a link in `href` to more detailed information about the artist.
    - name: available_markets
      type: "Array[String]"
      description: "A list of the countries in which the track can be played, identified\
        \ by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
        \ code."
    - name: disc_number
      type: Integer
      description: The disc number (usually `1` unless the album consists of more
        than one disc).
    - name: duration_ms
      type: Integer
      description: The track length in milliseconds.
    - name: explicit
      type: Boolean
      description: Whether or not the track has explicit lyrics ( `true` = yes it
        does; `false` = no it does not OR unknown).
    - name: external_ids
      type: ExternalIdObject
      description: Known external IDs for the track.
    - name: external_urls
      type: ExternalUrlObject
      description: Known external URLs for this track.
    - name: href
      type: String
      description: A link to the Web API endpoint providing full details of the track.
    - name: id
      type: String
      description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the track."
    - name: is_local
      type: Boolean
      description: Whether or not the track is from a local file.
    - name: is_playable
      type: Boolean
      description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
        \ is applied. If `true` , the track is playable in the given market. Otherwise\
        \ `false`."
    - name: linked_from
      type: LinkedTrackObject
      description: "Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)\
        \ is applied, and the requested track has been replaced with different track.\
        \ The track in the `linked_from` object contains information about the originally\
        \ requested track."
    - name: name
      type: String
      description: The name of the track.
    - name: popularity
      type: Integer
      description: "The popularity of the track. The value will be between 0 and 100,\
        \ with 100 being the most popular.  \nThe popularity of a track is a value\
        \ between 0 and 100, with 100 being the most popular. The popularity is calculated\
        \ by algorithm and is based, in the most part, on the total number of plays\
        \ the track has had and how recent those plays are.  \nGenerally speaking,\
        \ songs that are being played a lot now will have a higher popularity than\
        \ songs that were played a lot in the past. Duplicate tracks (e.g. the same\
        \ track from a single and an album) are rated independently. Artist and album\
        \ popularity is derived mathematically from track popularity. Note that the\
        \ popularity value may lag actual popularity by a few days: the value is not\
        \ updated in real time."
    - name: preview_url
      type: String
      description: A link to a 30 second preview (MP3 format) of the track. Can be
        `null`
    - name: restrictions
      type: TrackRestrictionObject
      description: "Included in the response when a content restriction is applied.\
        \ See [Restriction Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject)\
        \ for more details."
    - name: track_number
      type: Integer
      description: "The number of the track. If an album has several discs, the track\
        \ number is the number on the specified disc."
    - name: type
      type: String
      description: "The object type: \"track\"."
    - name: uri
      type: String
      description: "The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
        \ for the track."
  TrackRestrictionObject:
    name: TrackRestrictionObject
    id: object-trackrestrictionobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject
    properties:
    - name: reason
      type: String
      description: "The reason for the restriction. Supported values:  \n\n- `market`\
        \ - The content item is not available in the given market.  \n- `product`\
        \ - The content item is not available for the user's subscription type.  \n\
        - `explicit` - The content item is explicit and the user's account is set\
        \ to not play explicit content.  \n  Additional reasons may be added in the\
        \ future. **Note**: If you use this field, make sure that your application\
        \ safely handles unknown values."
  TracksObject:
    name: TracksObject
    properties:
    - name: tracks
      type: "Array[TrackObject]"
      description: ""
  TuneableTrackObject:
    name: TuneableTrackObject
    id: object-tuneabletrackobject
    link: https://developer.spotify.com/documentation/web-api/reference/#object-tuneabletrackobject
    properties:
    - name: acousticness
      type: Float
      description: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.
        1.0 represents high confidence the track is acoustic.
    - name: danceability
      type: Float
      description: "Danceability describes how suitable a track is for dancing based\
        \ on a combination of musical elements including tempo, rhythm stability,\
        \ beat strength, and overall regularity. A value of 0.0 is least danceable\
        \ and 1.0 is most danceable."
    - name: duration_ms
      type: Integer
      description: The duration of the track in milliseconds.
    - name: energy
      type: Float
      description: "Energy is a measure from 0.0 to 1.0 and represents a perceptual\
        \ measure of intensity and activity. Typically, energetic tracks feel fast,\
        \ loud, and noisy. For example, death metal has high energy, while a Bach\
        \ prelude scores low on the scale. Perceptual features contributing to this\
        \ attribute include dynamic range, perceived loudness, timbre, onset rate,\
        \ and general entropy."
    - name: instrumentalness
      type: Float
      description: "Predicts whether a track contains no vocals. \"Ooh\" and \"aah\"\
        \ sounds are treated as instrumental in this context. Rap or spoken word tracks\
        \ are clearly \"vocal\". The closer the instrumentalness value is to 1.0,\
        \ the greater likelihood the track contains no vocal content. Values above\
        \ 0.5 are intended to represent instrumental tracks, but confidence is higher\
        \ as the value approaches 1.0."
    - name: key
      type: Integer
      description: "The key the track is in. Integers map to pitches using standard\
        \ [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g.\
        \ 0 = C, 1 = C♯/D♭, 2 = D, and so on."
    - name: liveness
      type: Float
      description: Detects the presence of an audience in the recording. Higher liveness
        values represent an increased probability that the track was performed live.
        A value above 0.8 provides strong likelihood that the track is live.
    - name: loudness
      type: Float
      description: The overall loudness of a track in decibels (dB). Loudness values
        are averaged across the entire track and are useful for comparing relative
        loudness of tracks. Loudness is the quality of a sound that is the primary
        psychological correlate of physical strength (amplitude). Values typical range
        between -60 and 0 db.
    - name: mode
      type: Integer
      description: "Mode indicates the modality (major or minor) of a track, the type\
        \ of scale from which its melodic content is derived. Major is represented\
        \ by 1 and minor is 0."
    - name: popularity
      type: Float
      description: "The popularity of the track. The value will be between 0 and 100,\
        \ with 100 being the most popular. The popularity is calculated by algorithm\
        \ and is based, in the most part, on the total number of plays the track has\
        \ had and how recent those plays are. *Note: When applying track relinking\
        \ via the `market` parameter, it is expected to find relinked tracks with\
        \ popularities that do not match `min_*`, `max_*`and `target_*` popularities.\
        \ These relinked tracks are accurate replacements for unplayable tracks with\
        \ the expected popularity scores. Original, non-relinked tracks are available\
        \ via the `linked_from` attribute of the [relinked track response](https://developer.spotify.com/documentation/general/guides/track-relinking-guide).*"
    - name: speechiness
      type: Float
      description: "Speechiness detects the presence of spoken words in a track. The\
        \ more exclusively speech-like the recording (e.g. talk show, audio book,\
        \ poetry), the closer to 1.0 the attribute value. Values above 0.66 describe\
        \ tracks that are probably made entirely of spoken words. Values between 0.33\
        \ and 0.66 describe tracks that may contain both music and speech, either\
        \ in sections or layered, including such cases as rap music. Values below\
        \ 0.33 most likely represent music and other non-speech-like tracks."
    - name: tempo
      type: Float
      description: "The overall estimated tempo of a track in beats per minute (BPM).\
        \ In musical terminology, tempo is the speed or pace of a given piece and\
        \ derives directly from the average beat duration."
    - name: time_signature
      type: Integer
      description: An estimated overall time signature of a track. The time signature
        (meter) is a notational convention to specify how many beats are in each bar
        (or measure).
    - name: valence
      type: Float
      description: "A measure from 0.0 to 1.0 describing the musical positiveness\
        \ conveyed by a track. Tracks with high valence sound more positive (e.g.\
        \ happy, cheerful, euphoric), while tracks with low valence sound more negative\
        \ (e.g. sad, depressed, angry)."
categories:
  category-albums:
    id: category-albums
    name: Albums API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-albums
    endpoints:
      endpoint-get-an-album:
        id: endpoint-get-an-album
        name: Get an Album
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-album
        description: Get Spotify catalog information for a single album.
        httpMethod: GET
        path: "/albums/{id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: id
          description: The Spotify ID of the album.
          type: String
          required: true
        - location: QUERY
          name: market
          description: The market you'd like to request. Synonym for `country`.
          type: String
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is 200 OK and the response body contains an album object in JSON format.\
          \ On error, the header status code is an error code and the response body\
          \ contains an error object."
        scopes: []
        responseTypes:
        - type: AlbumObject
          status: 200
      endpoint-get-an-albums-tracks:
        id: endpoint-get-an-albums-tracks
        name: Get an Album's Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks
        description: |-
          Get Spotify catalog information about an album's tracks.
          Optional parameters can be used to limit the number of tracks returned.
        httpMethod: GET
        path: "/albums/{id}/tracks"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: id
          description: The Spotify ID of the album.
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string from_token. Provide this parameter if you want to apply\
            \ [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of tracks to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first track to return. Default: 0 (the first\
            \ object). Use with limit to get the next set of tracks."
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is 200 OK and the response body contains an album object in JSON format.\
          \ On error, the header status code is an error code and the response body\
          \ contains an error object."
        scopes: []
        responseTypes:
        - type: "PagingObject[SimplifiedTrackObject]"
          status: 200
      endpoint-get-multiple-albums:
        id: endpoint-get-multiple-albums
        name: Get Multiple Albums
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-albums
        description: Get Spotify catalog information for multiple albums identified
          by their Spotify IDs.
        httpMethod: GET
        path: /albums
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the albums. Maximum: 20 IDs."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string from_token. Provide this parameter if you want to apply\
            \ [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)."
          type: String
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `"albums"` and whose value is an array of [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-albumobject) in JSON format.

          Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        responseTypes:
        - type: AlbumsObject
          status: 200
  category-artists:
    id: category-artists
    name: Artists API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-artists
    endpoints:
      endpoint-get-an-artist:
        id: endpoint-get-an-artist
        name: Get an Artist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artist
        description: Get Spotify catalog information for a single artist identified
          by their unique Spotify ID.
        httpMethod: GET
        path: "/artists/{id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: id
          description: The Spotify ID of the artist.
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an [artist object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes: []
        responseTypes:
        - type: ArtistObject
          status: 200
      endpoint-get-an-artists-albums:
        id: endpoint-get-an-artists-albums
        name: Get an Artist's Albums
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-albums
        description: Get Spotify catalog information about an artist's albums.
        httpMethod: GET
        path: "/artists/{id}/albums"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artist."
          type: String
          required: true
        - location: QUERY
          name: include_groups
          description: "A comma-separated list of keywords that will be used to filter\
            \ the response. If not supplied, all album types will be returned. Valid\
            \ values are:  \n- `album`  \n- `single`  \n- `appears_on`  \n- `compilation`\
            \  \nFor example: `include_groups=album,single`."
          type: String
          required: false
        - location: QUERY
          name: market
          description: "Synonym for `country`. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`.  \nSupply this parameter to limit the response\
            \ to one particular geographical market. For example, for albums available\
            \ in Sweden: `market=SE`.  \n*If not given, results will be returned for\
            \ all markets and you are likely to get duplicate results per album, one\
            \ for each market in which the album is available!*"
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The number of album objects to return. Default: 20. Minimum:\
            \ 1. Maximum: 50. For example: `limit=2`"
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first album to return. Default: 0 (i.e.,\
            \ the first album). Use with `limit` to get the next set of albums."
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an array of simplified [album\
          \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject)\
          \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes: []
        responseTypes:
        - type: "PagingObject[SimplifiedAlbumObject]"
          status: 200
      endpoint-get-an-artists-related-artists:
        id: endpoint-get-an-artists-related-artists
        name: Get an Artist's Related Artists
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-related-artists
        description: "Get Spotify catalog information about artists similar to a given\
          \ artist. Similarity is based on analysis of the Spotify community's [listening\
          \ history](http://news.spotify.com/se/2010/02/03/related-artists/)."
        httpMethod: GET
        path: "/artists/{id}/related-artists"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artist"
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an object whose key is `\"\
          artists\"` and whose value is an array of up to 20 [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes: []
        responseTypes:
        - type: ArtistsObject
          status: 200
      endpoint-get-an-artists-top-tracks:
        id: endpoint-get-an-artists-top-tracks
        name: Get an Artist's Top Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-top-tracks
        description: Get Spotify catalog information about an artist's top tracks
          by country.
        httpMethod: GET
        path: "/artists/{id}/top-tracks"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artist"
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`. Synonym for `country`."
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an object whose key is `\"\
          tracks\"` and whose value is an array of up to 10 [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes: []
        responseTypes:
        - type: TracksObject
          status: 200
      endpoint-get-multiple-artists:
        id: endpoint-get-multiple-artists
        name: Get Multiple Artists
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-artists
        description: Get Spotify catalog information for several artists based on
          their Spotify IDs.
        httpMethod: GET
        path: /artists
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the artists. Maximum: 50 IDs."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `"artists"` and whose value is an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format.

          Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        responseTypes:
        - type: ArtistsObject
          status: 200
  category-browse:
    id: category-browse
    name: Browse API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-browse
    endpoints:
      endpoint-get-a-categories-playlists:
        id: endpoint-get-a-categories-playlists
        name: Get a Category's Playlists
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-categories-playlists
        description: Get a list of Spotify playlists tagged with a particular category.
        httpMethod: GET
        path: "/browse/categories/{category_id}/playlists"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: category_id
          description: "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the category."
          type: String
          required: true
        - location: QUERY
          name: country
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter to ensure that the category exists for a particular\
            \ country."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first item to return. Default: 0 (the first\
            \ object). Use with `limit` to get the next set of items."
          type: Integer
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

          Once you have retrieved the list, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.
        scopes: []
        responseTypes:
        - type: PlaylistPagingObject
          status: 200
      endpoint-get-a-category:
        id: endpoint-get-a-category
        name: Get a Category
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-category
        description: "Get a single category used to tag items in Spotify (on, for\
          \ example, the Spotify player's \"Browse\" tab)."
        httpMethod: GET
        path: "/browse/categories/{category_id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: PATH
          name: category_id
          description: "The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the category."
          type: String
          required: true
        - location: QUERY
          name: country
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter to ensure that the category exists for a particular\
            \ country."
          type: String
          required: false
        - location: QUERY
          name: locale
          description: "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1)\
            \ language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2),\
            \ joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\"\
            . Provide this parameter if you want the category strings returned in\
            \ a particular language. Note that, if `locale` is not supplied, or if\
            \ the specified language is not available, the category strings returned\
            \ will be in the Spotify default language (American English)."
          type: String
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a [category object](#categoryobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

          Once you have retrieved the category, you can use [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) to drill down further.
        scopes: []
        responseTypes:
        - type: CategoryObject
          status: 200
      endpoint-get-categories:
        id: endpoint-get-categories
        name: Get All Categories
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-categories
        description: "Get a list of categories used to tag items in Spotify (on, for\
          \ example, the Spotify player's \"Browse\" tab)."
        httpMethod: GET
        path: /browse/categories
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: QUERY
          name: country
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter if you want to narrow the list of returned categories\
            \ to those relevant to a particular country. If omitted, the returned\
            \ items will be globally relevant."
          type: String
          required: false
        - location: QUERY
          name: locale
          description: "The desired language, consisting of an [ISO 639-1](http://en.wikipedia.org/wiki/ISO_639-1)\
            \ language code and an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2),\
            \ joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\"\
            . Provide this parameter if you want the category metadata returned in\
            \ a particular language. Note that, if `locale` is not supplied, or if\
            \ the specified language is not available, all strings will be returned\
            \ in the Spotify default language (American English). The `locale` parameter,\
            \ combined with the `country` parameter, may give odd results if not carefully\
            \ matched. For example `country=SE&locale=de_DE` will return a list of\
            \ categories relevant to Sweden but as German language strings."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of categories to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first item to return. Default: 0 (the first\
            \ object). Use with `limit` to get the next set of categories."
          type: Integer
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an object with a `categories` field, with an array of [category objects](#categoryobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

          Once you have retrieved the list, you can use [Get a Category](https://developer.spotify.com/web-api/get-category/) to drill down further.
        scopes: []
        responseTypes:
        - type: CategoriesObject
          status: 200
      endpoint-get-featured-playlists:
        id: endpoint-get-featured-playlists
        name: Get All Featured Playlists
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-featured-playlists
        description: "Get a list of Spotify featured playlists (shown, for example,\
          \ on a Spotify player's 'Browse' tab)."
        httpMethod: GET
        path: /browse/featured-playlists
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: QUERY
          name: country
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter if you want the list of returned items to be\
            \ relevant to a particular country. If omitted, the returned items will\
            \ be relevant to all countries."
          type: String
          required: false
        - location: QUERY
          name: locale
          description: "The desired language, consisting of a lowercase [ISO 639-1\
            \ language code](http://en.wikipedia.org/wiki/ISO_639-1) and an uppercase\
            \ [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2),\
            \ joined by an underscore. For example: `es_MX`, meaning \"Spanish (Mexico)\"\
            . Provide this parameter if you want the results returned in a particular\
            \ language (where available). Note that, if `locale` is not supplied,\
            \ or if the specified language is not available, all strings will be returned\
            \ in the Spotify default language (American English). The `locale` parameter,\
            \ combined with the `country` parameter, may give odd results if not carefully\
            \ matched. For example `country=SE&locale=de_DE` will return a list of\
            \ categories relevant to Sweden but as German language strings."
          type: String
          required: false
        - location: QUERY
          name: timestamp
          description: "A timestamp in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601):\
            \ `yyyy-MM-ddTHH:mm:ss`. Use this parameter to specify the user's local\
            \ time to get results tailored for that specific date and time in the\
            \ day. If not provided, the response defaults to the current UTC time.\
            \ Example: \"2014-10-23T09:00:00\" for a user whose local time is 9AM.\
            \ If there were no featured playlists (or there is no data) at the specified\
            \ time, the response will revert to the current UTC time."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first item to return. Default: 0 (the first\
            \ object). Use with `limit` to get the next set of items."
          type: Integer
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and a `playlists` object. The `playlists` object contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

          Once you have retrieved the list of playlist objects, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.
        scopes: []
        responseTypes:
        - type: FeaturedPlaylistObject
          status: 200
      endpoint-get-new-releases:
        id: endpoint-get-new-releases
        name: Get All New Releases
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-new-releases
        description: "Get a list of new album releases featured in Spotify (shown,\
          \ for example, on a Spotify player's \"Browse\" tab)."
        httpMethod: GET
        path: /browse/new-releases
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: QUERY
          name: country
          description: "A country: an [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ Provide this parameter if you want the list of returned items to be\
            \ relevant to a particular country. If omitted, the returned items will\
            \ be relevant to all countries."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first item to return. Default: 0 (the first\
            \ object). Use with `limit` to get the next set of items."
          type: Integer
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and an`albums` object. The `albums` object contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

          Once you have retrieved the list, you can use [Get an Album's Tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks) to drill down further.

          The results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date.
        scopes: []
        responseTypes:
        - type: NewReleasesObject
          status: 200
      endpoint-get-recommendation-genres:
        id: endpoint-get-recommendation-genres
        name: Get Recommendation Genres
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendation-genres
        description: "Retrieve a list of available genres seed parameter values for\
          \ [recommendations](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendations)."
        httpMethod: GET
        path: /recommendations/available-genre-seeds
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200 OK` and the response body contains a recommendations response\
          \ object in JSON format."
        scopes: []
        responseTypes:
        - type: GenreSeedsObject
          status: 200
      endpoint-get-recommendations:
        id: endpoint-get-recommendations
        name: Get Recommendations
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendations
        description: "Recommendations are generated based on the available information\
          \ for a given seed entity and matched against similar artists and tracks.\
          \ If there is sufficient information about the provided seeds, a list of\
          \ tracks will be returned together with pool size details."
        httpMethod: GET
        path: /recommendations
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        - location: QUERY
          name: limit
          description: "The target size of the list of recommended tracks. For seeds\
            \ with unusually small pools or when highly restrictive filtering is applied,\
            \ it may be impossible to generate the requested number of recommended\
            \ tracks. Debugging information for such cases is available in the response.\
            \ Default: 20. Minimum: 1. Maximum: 100."
          type: Integer
          required: false
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`. Provide this parameter if you want to apply\
            \ [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide).\
            \ Because `min_*`, `max_*` and `target_*` are applied to pools before\
            \ relinking, the generated results may not precisely match the filters\
            \ applied. Original, non-relinked tracks are available via the `linked_from`\
            \ attribute of the [relinked track response](https://developer.spotify.com/documentation/general/guides/track-relinking-guide)."
          type: String
          required: false
        - location: QUERY
          name: seed_artists
          description: "A comma separated list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for seed artists. Up to 5 seed values may be provided in any combination\
            \ of `seed_artists`, `seed_tracks` and `seed_genres`."
          type: String
          required: true
        - location: QUERY
          name: seed_genres
          description: "A comma separated list of any genres in the set of [available\
            \ genre seeds](#available-genre-seeds). Up to 5 seed values may be provided\
            \ in any combination of `seed_artists`, `seed_tracks` and `seed_genres`."
          type: String
          required: true
        - location: QUERY
          name: seed_tracks
          description: "A comma separated list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for a seed track. Up to 5 seed values may be provided in any combination\
            \ of `seed_artists`, `seed_tracks` and `seed_genres`."
          type: String
          required: true
        - location: QUERY
          name: min_acousticness
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_acousticness
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_acousticness
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        - location: QUERY
          name: min_danceability
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_danceability
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_danceability
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        - location: QUERY
          name: min_duration_ms
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Integer
          required: false
        - location: QUERY
          name: max_duration_ms
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Integer
          required: false
        - location: QUERY
          name: target_duration_ms
          description: Target duration of the track (ms)
          type: Integer
          required: false
        - location: QUERY
          name: min_energy
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_energy
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_energy
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        - location: QUERY
          name: min_instrumentalness
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_instrumentalness
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_instrumentalness
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        - location: QUERY
          name: min_key
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Integer
          required: false
        - location: QUERY
          name: max_key
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Integer
          required: false
        - location: QUERY
          name: target_key
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Integer
          required: false
        - location: QUERY
          name: min_liveness
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_liveness
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_liveness
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        - location: QUERY
          name: min_loudness
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_loudness
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_loudness
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        - location: QUERY
          name: min_mode
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Integer
          required: false
        - location: QUERY
          name: max_mode
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Integer
          required: false
        - location: QUERY
          name: target_mode
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Integer
          required: false
        - location: QUERY
          name: min_popularity
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Integer
          required: false
        - location: QUERY
          name: max_popularity
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Integer
          required: false
        - location: QUERY
          name: target_popularity
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Integer
          required: false
        - location: QUERY
          name: min_speechiness
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_speechiness
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_speechiness
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        - location: QUERY
          name: min_tempo
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_tempo
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_tempo
          description: Target tempo (BPM)
          type: Number
          required: false
        - location: QUERY
          name: min_time_signature
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Integer
          required: false
        - location: QUERY
          name: max_time_signature
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Integer
          required: false
        - location: QUERY
          name: target_time_signature
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Integer
          required: false
        - location: QUERY
          name: min_valence
          description: "For each tunable track attribute, a hard floor on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `min_tempo=140`\
            \ would restrict results to only those tracks with a tempo of greater\
            \ than 140 beats per minute."
          type: Number
          required: false
        - location: QUERY
          name: max_valence
          description: "For each tunable track attribute, a hard ceiling on the selected\
            \ track attribute's value can be provided. See tunable track attributes\
            \ below for the list of available options. For example, `max_instrumentalness=0.35`\
            \ would filter out most tracks that are likely to be instrumental."
          type: Number
          required: false
        - location: QUERY
          name: target_valence
          description: "For each of the tunable track attributes (below) a target\
            \ value may be provided. Tracks with the attribute values nearest to the\
            \ target values will be preferred. For example, you might request `target_energy=0.6`\
            \ and `target_danceability=0.8`. All target values will be weighed equally\
            \ in ranking results."
          type: Number
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200 OK` and the response body contains a recommendations response\
          \ object in JSON format."
        scopes: []
        responseTypes:
        - type: RecommendationsObject
          status: 200
  category-episodes:
    id: category-episodes
    name: Episodes API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-episodes
    endpoints:
      endpoint-get-an-episode:
        id: endpoint-get-an-episode
        name: Get an Episode
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-episode
        description: |-
          Get Spotify catalog information for a single episode identified by its
          unique Spotify ID.
        httpMethod: GET
        path: "/episodes/{id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episode."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only shows and episodes that are available\
            \ in that market will be returned.  \nIf a valid user access token is\
            \ specified in the request header, the country associated with the user\
            \ account will take priority over this parameter.  \n*Note: If neither\
            \ market or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
          type: String
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200`\nOK and the response body contains an [episode object](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\n\
          in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\n\
          and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \  \n\nIf an episode is unavailable in the given `market` the HTTP status\
          \ code in the response header is `404` NOT FOUND."
        scopes: []
        responseTypes:
        - type: EpisodeObject
          status: 200
      endpoint-get-multiple-episodes:
        id: endpoint-get-multiple-episodes
        name: Get Multiple Episodes
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-episodes
        description: Get Spotify catalog information for several episodes based on
          their Spotify IDs.
        httpMethod: GET
        path: /episodes
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episodes. Maximum: 50 IDs."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only shows and episodes that are available\
            \ in that market will be returned.  \nIf a valid user access token is\
            \ specified in the request header, the country associated with the user\
            \ account will take priority over this parameter.  \n*Note: If neither\
            \ market or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
          type: String
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200`
          OK and the response body contains an object whose key is `episodes` and whose
          value is an array of [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)
          in JSON format.

          Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position.
          Duplicate `ids` in the query will result in duplicate objects in the response. If an episode is unavailable in the given `market`, a `null` value is returned.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        responseTypes:
        - type: EpisodesObject
          status: 200
  category-follow:
    id: category-follow
    name: Follow API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-follow
    endpoints:
      endpoint-check-current-user-follows:
        id: endpoint-check-current-user-follows
        name: Get Following State for Artists/Users
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-current-user-follows
        description: Check to see if the current user is following one or more artists
          or other Spotify users.
        httpMethod: GET
        path: /me/following/contains
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials. Requires
            the `user-follow-read` scope.
          type: String
          required: true
        - location: QUERY
          name: type
          description: "The ID type: either `artist` or `user`."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the artist or the user [Spotify\
            \ IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to check. For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`.\
            \ A maximum of 50 IDs can be sent in one request."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-follow-read
        responseTypes:
        - type: "Array[Boolean]"
          status: 200
      endpoint-check-if-user-follows-playlist:
        id: endpoint-check-if-user-follows-playlist
        name: Check if Users Follow a Playlist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-if-user-follows-playlist
        description: Check to see if one or more Spotify users are following a specified
          playlist.
        httpMethod: GET
        path: "/playlists/{playlist_id}/followers/contains"
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials. Requires
            the `playlist-read-private` scope if a private playlist is requested.
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of [Spotify User IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ ; the ids of the users that you want to check to see if they follow\
            \ the playlist. Maximum: 5 ids."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - playlist-read-private
        responseTypes:
        - type: "Array[Boolean]"
          status: 200
      endpoint-follow-artists-users:
        id: endpoint-follow-artists-users
        name: Follow Artists or Users
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-artists-users
        description: Add the current user as a follower of one or more artists or
          other Spotify users.
        httpMethod: PUT
        path: /me/following
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials. Requires
            the `user-follow-modify` scope.
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if IDs are passed in the request body, otherwise\
            \ ignored* . The content type of the request body: `application/json`"
          type: String
          required: false
        - location: QUERY
          name: type
          description: The ID type.
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the artist or the user [Spotify\
            \ IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ A maximum of 50 IDs can be sent in one request."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"\
            ]}`. A maximum of 50 IDs can be sent in one request. *Note: if the `ids`\
            \ parameter is present in the query string, any IDs listed here in the\
            \ body will be ignored.*"
          type: "Array[String]"
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `204` No Content and the response body is empty.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-follow-modify
        responseTypes:
        - type: Void
          status: 204
      endpoint-follow-playlist:
        id: endpoint-follow-playlist
        name: Follow a Playlist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-playlist
        description: Add the current user as a follower of a playlist.
        httpMethod: PUT
        path: "/playlists/{playlist_id}/followers"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user.  \nFollowing a playlist publicly requires authorization of the\
            \ `playlist-modify-public` scope; following a playlist privately requires\
            \ the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).\
            \  \n*Note that the scopes you provide relate only to whether the current\
            \ user is following the playlist publicly or privately (i.e. showing others\
            \ what they are following), not whether the playlist itself is public\
            \ or private.*"
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "The content type of the request body: `application/json`"
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist. Any playlist can be followed, regardless of its [public/private\
            \ status](https://developer.spotify.com/documentation/general/guides/working-with-playlists/#public-private-and-collaborative-status),\
            \ as long as you know its playlist ID."
          type: String
          required: true
        - location: BODY
          name: public
          description: "Defaults to `true`. If `true` the playlist will be included\
            \ in user's public playlists, if `false` it will remain private."
          type: Boolean
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body is empty.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - playlist-modify-public
        - playlist-modify-private
        responseTypes:
        - type: Void
          status: 200
      endpoint-get-followed:
        id: endpoint-get-followed
        name: Get User's Followed Artists
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-followed
        description: Get the current user's followed artists.
        httpMethod: GET
        path: /me/following
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials. Requires
            the `user-follow-modify` scope.
          type: String
          required: true
        - location: QUERY
          name: type
          description: "The ID type: currently only `artist` is supported."
          type: String
          required: true
        - location: QUERY
          name: after
          description: The last artist ID retrieved from the previous request.
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an `artists` object.
          The `artists` object in turn contains a [cursor-based paging object](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-follow-modify
        responseTypes:
        - type: FollowingArtistsObject
          status: 200
      endpoint-unfollow-artists-users:
        id: endpoint-unfollow-artists-users
        name: Unfollow Artists or Users
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-artists-users
        description: Remove the current user as a follower of one or more artists
          or other Spotify users.
        httpMethod: DELETE
        path: /me/following
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials. Requires
            the `user-follow-modify` scope.
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if IDs are passed in the request body, otherwise\
            \ ignored* . The content type of the request body: `application/json`."
          type: String
          required: false
        - location: QUERY
          name: type
          description: "The ID type: either `artist` or `user`."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the artist or the user [Spotify\
            \ IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=74ASZWbe4lXaubB36ztrGX,08td7MxkoHQkXnWAYD8d6Q`. A\
            \ maximum of 50 IDs can be sent in one request."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"\
            ]}`. A maximum of 50 IDs can be sent in one request. *Note: if the `ids`\
            \ parameter is present in the query string, any IDs listed here in the\
            \ body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `204` No Content and the response body is empty.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-follow-modify
        responseTypes:
        - type: Void
          status: 204
      endpoint-unfollow-playlist:
        id: endpoint-unfollow-playlist
        name: Unfollow Playlist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-playlist
        description: Remove the current user as a follower of a playlist.
        httpMethod: DELETE
        path: "/playlists/{playlist_id}/followers"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user.  \nUnfollowing a publicly followed playlist for a user requires\
            \ authorization of the `playlist-modify-public` scope; unfollowing a privately\
            \ followed playlist requires the `playlist-modify-private` scope. See\
            \ [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).\
            \  \n*Note that the scopes you provide relate only to whether the current\
            \ user is following the playlist publicly or privately (i.e. showing others\
            \ what they are following), not whether the playlist itself is public\
            \ or private.*"
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ of the playlist that is to be no longer followed."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body is empty.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - playlist-modify-public
        - playlist-modify-private
        responseTypes:
        - type: Void
          status: 200
  category-library:
    id: category-library
    name: Library API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-library
    endpoints:
      endpoint-check-users-saved-albums:
        id: endpoint-check-users-saved-albums
        name: Check User's Saved Albums
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-albums
        description: Check if one or more albums is already saved in the current Spotify
          user's 'Your Music' library.
        httpMethod: GET
        path: /me/albums/contains
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ must have been authorized by the user."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the albums. Maximum: 50 IDs."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-library-read
        responseTypes:
        - type: "Array[Boolean]"
          status: 200
      endpoint-check-users-saved-episodes:
        id: endpoint-check-users-saved-episodes
        name: Check User's Saved Episodes
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-episodes
        description: "Check if one or more episodes is already saved in the current\
          \ Spotify user's 'Your Episodes' library.  \n\nThis API endpoint is in **beta**\
          \ and could change without warning. Please share any feedback that you have,\
          \ or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).."
        httpMethod: GET
        path: /me/episodes/contains
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ must have been authorized by the user."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the episodes. Maximum: 50 IDs."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-library-read
        responseTypes:
        - type: "Array[Boolean]"
          status: 200
      endpoint-check-users-saved-shows:
        id: endpoint-check-users-saved-shows
        name: Check User's Saved Shows
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-shows
        description: Check if one or more shows is already saved in the current Spotify
          user's library.
        httpMethod: GET
        path: /me/shows/contains
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been isued on behalf of the\
            \ user. The `user-library-read` scope must have been authorised by the\
            \ user."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the Spotify IDs for the shows. Maximum:\
            \ 50 ids."
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains a JSON array of `true`or `false`\
          \ values, in the same order in which the `ids` were specified. On error,\
          \ the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details)."
        scopes:
        - user-library-read
        responseTypes:
        - type: "Array[Boolean]"
          status: 200
      endpoint-check-users-saved-tracks:
        id: endpoint-check-users-saved-tracks
        name: Check User's Saved Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-tracks
        description: Check if one or more tracks is already saved in the current Spotify
          user's 'Your Music' library.
        httpMethod: GET
        path: /me/tracks/contains
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ must have been authorized by the user."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the tracks. Maximum: 50 IDs."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-library-read
        responseTypes:
        - type: "Array[Boolean]"
          status: 200
      endpoint-get-users-saved-albums:
        id: endpoint-get-users-saved-albums
        name: Get User's Saved Albums
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-albums
        description: Get a list of the albums saved in the current Spotify user's
          'Your Music' library.
        httpMethod: GET
        path: /me/albums
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ must have been authorized by the user."
          type: String
          required: true
        - location: QUERY
          name: limit
          description: "The maximum number of objects to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first object to return. Default: 0 (i.e.,\
            \ the first object). Use with `limit` to get the next set of objects."
          type: Integer
          required: false
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`. Provide this parameter if you want to apply\
            \ [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)."
          type: String
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved album objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. Each album object is accompanied by a [timestamp](https://developer.spotify.com/documentation/web-api/#timestamps) (`added_at`) to show when it was added. There is also an **etag** in the header that can be used in future [conditional requests](https://developer.spotify.com/documentation/web-api/#conditional-requests).

          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes:
        - user-library-read
        responseTypes:
        - type: "PagingObject[SavedAlbumObject]"
          status: 200
      endpoint-get-users-saved-episodes:
        id: endpoint-get-users-saved-episodes
        name: Get User's Saved Episodes
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-episodes
        description: "Get a list of the episodes saved in the current Spotify user's\
          \ library.  \n\nThis API endpoint is in **beta** and could change without\
          \ warning. Please share any feedback that you have, or issues that you discover,\
          \ in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)."
        httpMethod: GET
        path: /me/episodes
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ must have been authorized by the user."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only episodes that are available in\
            \ that market will be returned.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n*Note: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of objects to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first object to return. Default: 0 (i.e.,\
            \ the first object). Use with `limit` to get the next set of objects."
          type: Integer
          required: false
        responseDescription: "- On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an array of [saved episode\
          \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject)\
          \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes:
        - user-library-read
        responseTypes:
        - type: "PagingObject[SavedEpisodeObject]"
          status: 200
      endpoint-get-users-saved-shows:
        id: endpoint-get-users-saved-shows
        name: Get User's Saved Shows
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-shows
        description: Get a list of shows saved in the current Spotify user's library.
          Optional parameters can be used to limit the number of shows returned.
        httpMethod: GET
        path: /me/shows
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been isued on behalf of the\
            \ user. The `user-library-read` scope must have been authorised by the\
            \ user."
          type: String
          required: true
        - location: QUERY
          name: limit
          description: "The maximum number of shows to return. Default: 20. Minimum:\
            \ 1. Maximum: 50"
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first show to return. Default: 0 (the first\
            \ object). Use with limit to get the next set of shows."
          type: Integer
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved show objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.
          If the current user has no shows saved, the response will be an empty array. If a show is unavailable in the given `market` it is filtered out. The `total` field in the paging object represents the number of all items, filtered or not, and thus might be larger than the actual total number of observable items.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).
        scopes:
        - user-library-read
        responseTypes:
        - type: "PagingObject[SavedShowObject]"
          status: 200
      endpoint-get-users-saved-tracks:
        id: endpoint-get-users-saved-tracks
        name: Get User's Saved Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-tracks
        description: Get a list of the songs saved in the current Spotify user's 'Your
          Music' library.
        httpMethod: GET
        path: /me/tracks
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The `user-library-read` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ must have been authorized by the user."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`. Provide this parameter if you want to apply\
            \ [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of objects to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first object to return. Default: 0 (i.e.,\
            \ the first object). Use with `limit` to get the next set of objects."
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an array of [saved track objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject)\
          \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes:
        - user-library-read
        responseTypes:
        - type: "PagingObject[SavedTrackObject]"
          status: 200
      endpoint-remove-albums-user:
        id: endpoint-remove-albums-user
        name: Remove Albums for Current User
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-albums-user
        description: Remove one or more albums from the current user's 'Your Music'
          library.
        httpMethod: DELETE
        path: /me/albums
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nModification of the current user's \"Your Music\" collection\
            \ requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if the IDs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: false
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
            ]`  \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Trying to remove an album when you do not have the user's authorization\
          \ returns error `403` Forbidden."
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 200
      endpoint-remove-episodes-user:
        id: endpoint-remove-episodes-user
        name: Remove User's Saved Episodes
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-episodes-user
        description: "Remove one or more episodes from the current user's library.\
          \  \n\nThis API endpoint is in **beta** and could change without warning.\
          \ Please share any feedback that you have, or issues that you discover,\
          \ in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)."
        httpMethod: DELETE
        path: /me/episodes
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nModification of the current user's collection requires\
            \ authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if the IDs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: false
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ Maximum: 50 IDs."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \   \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Trying to remove an episode when you do not have the user's authorization\
          \ returns error `403` Forbidden."
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 200
      endpoint-remove-shows-user:
        id: endpoint-remove-shows-user
        name: Remove User's Saved Shows
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-shows-user
        description: Delete one or more shows from current Spotify user's library.
        httpMethod: DELETE
        path: /me/shows
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user. The `user-library-modify` scope must have been authorized by the\
            \ user."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: A comma-separated list of Spotify IDs for the shows to be deleted
            from the user's library.
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only shows that are available in that\
            \ market will be removed.  \nIf a valid user access token is specified\
            \ in the request header, the country associated with the user account\
            \ will take priority over this parameter.  \n*Note: If neither market\
            \ or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
          type: String
          required: false
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \  \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK.
          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation.
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 200
      endpoint-remove-tracks-user:
        id: endpoint-remove-tracks-user
        name: Remove User's Saved Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-user
        description: Remove one or more tracks from the current user's 'Your Music'
          library.
        httpMethod: DELETE
        path: /me/tracks
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nModification of the current user's \"Your Music\" collection\
            \ requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if the IDs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: false
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
            ]`  \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Trying to remove an album when you do not have the user's authorization\
          \ returns error `403` Forbidden."
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 200
      endpoint-save-albums-user:
        id: endpoint-save-albums-user
        name: Save Albums for Current User
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-albums-user
        description: Save one or more albums to the current user's 'Your Music' library.
        httpMethod: PUT
        path: /me/albums
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nModification of the current user's \"Your Music\" collection\
            \ requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if the IDs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: false
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
            ]`  \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `201` Created. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Trying to add an album when you do not have the user's authorization returns\
          \ error `403` Forbidden."
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 201
      endpoint-save-episodes-user:
        id: endpoint-save-episodes-user
        name: Save Episodes for User
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-episodes-user
        description: "Save one or more episodes to the current user's library.  \n\
          \nThis API endpoint is in **beta** and could change without warning. Please\
          \ share any feedback that you have, or issues that you discover, in our\
          \ [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)."
        httpMethod: PUT
        path: /me/episodes
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nModification of the current user's \"Your Music\" collection\
            \ requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if the IDs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: false
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ Maximum: 50 IDs."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \   \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Trying to add an episode when you do not have the user's authorization,\
          \ returns error `403` Forbidden."
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 200
      endpoint-save-shows-user:
        id: endpoint-save-shows-user
        name: Save Shows for Current User
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-shows-user
        description: Save one or more shows to current Spotify user's library.
        httpMethod: PUT
        path: /me/shows
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user. The `user-library-modify` scope must have been authorized by the\
            \ user."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ Maximum: 50 IDs."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \  \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).\
          \ A `403 Forbidden` while trying to add a show when you do not have the\
          \ user's authorisation or when the user already has have over 10,000 items\
          \ saved in library."
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 200
      endpoint-save-tracks-user:
        id: endpoint-save-tracks-user
        name: Save Tracks for User
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-tracks-user
        description: Save one or more tracks to the current user's 'Your Music' library.
        httpMethod: PUT
        path: /me/tracks
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nModification of the current user's \"Your Music\" collection\
            \ requires authorization of the `user-library-modify` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if the IDs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: false
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum:\
            \ 50 IDs."
          type: String
          required: true
        - location: BODY
          name: ids
          description: "A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).\
            \ For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"\
            ]`  \nA maximum of 50 items can be specified in one request. *Note: if\
            \ the `ids` parameter is present in the query string, any IDs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Trying to add a track when you do not have the user's authorization, or\
          \ when you have over 10.000 tracks in Your Music, returns error `403` Forbidden."
        scopes:
        - user-library-modify
        responseTypes:
        - type: Void
          status: 200
  category-markets:
    id: category-markets
    name: Markets API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-markets
    endpoints:
      endpoint-get-available-markets:
        id: endpoint-get-available-markets
        name: Get Available Markets
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-available-markets
        description: Get the list of markets where Spotify is available.
        httpMethod: GET
        path: /markets
        parameters:
        - location: HEADER
          name: Authorization
          description: A valid user access token or your client credentials.
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is 200 OK and the response body contains a list of the countries in which\
          \ Spotify is available, identified by their [ISO 3166-1 alpha-2 country\
          \ code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) with additional\
          \ country codes for special territories. On error, the header status code\
          \ is an error code and the response body contains an error object."
        scopes: []
        responseTypes:
        - type: MarketsObject
          status: 200
  category-personalization:
    id: category-personalization
    name: Personalization API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-personalization
    endpoints:
      endpoint-get-users-top-artists-and-tracks:
        id: endpoint-get-users-top-artists-and-tracks
        name: Get a User's Top Artists and Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks
        description: Get the current user's top artists or tracks based on calculated
          affinity.
        httpMethod: GET
        path: "/me/top/{type}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ current user.  \nGetting details of a user's top artists and tracks\
            \ requires authorization of the `user-top-read` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: PATH
          name: type
          description: "The type of entity to return. Valid values: `artists` or `tracks`"
          type: String
          required: true
        - location: QUERY
          name: time_range
          description: "Over what time frame the affinities are computed. Valid values:\
            \ `long_term` (calculated from several years of data and including all\
            \ new data as it becomes available), `medium_term` (approximately last\
            \ 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`"
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The number of entities to return. Default: 20. Minimum: 1.\
            \ Maximum: 50. For example: `limit=2`"
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first entity to return. Default: 0 (i.e.,\
            \ the first track). Use with limit to get the next set of entities."
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200 OK` and the response body contains a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)\
          \ of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)\
          \ or [Tracks](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject).\
          \ On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes:
        - user-top-read
        responseTypes:
        - type: "PagingObject[ArtistObject | TrackObject]"
          status: 200
  category-player:
    id: category-player
    name: Player API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-player
    endpoints:
      endpoint-add-to-queue:
        id: endpoint-add-to-queue
        name: Add an item to queue
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-to-queue
        description: Add an item to the end of the user's current playback queue.
        httpMethod: POST
        path: /me/player/queue
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback"
          type: String
          required: true
        - location: QUERY
          name: uri
          description: The uri of the item to add to the queue. Must be a track or
            an episode uri.
          type: String
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-get-a-users-available-devices:
        id: endpoint-get-a-users-available-devices
        name: Get a User's Available Devices
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-users-available-devices
        description: Get information about a user's available devices.
        httpMethod: GET
        path: /me/player/devices
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of a user.\
            \ The access token must have the `user-read-playback-state` scope authorized\
            \ in order to read information."
          type: String
          required: true
        responseDescription: |-
          A successful request will return a `200 OK` response code with a json payload that contains the device objects (see below).
          When no available devices are found, the request will return a 200 OK response with an empty devices list.
        scopes:
        - user-read-playback-state
        responseTypes:
        - type: DevicesObject
          status: 200
      endpoint-get-information-about-the-users-current-playback:
        id: endpoint-get-information-about-the-users-current-playback
        name: Get Information About The User's Current Playback
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback
        description: "Get information about the user's current playback state, including\
          \ track or episode, progress, and active device."
        httpMethod: GET
        path: /me/player
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: QUERY
          name: market
          description: |-
            An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          type: String
          required: false
        - location: QUERY
          name: additional_types
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \ An unsupported type in the response is expected to be represented as\
            \ `null` value in the `item` field. **Note**: This parameter was introduced\
            \ to allow existing clients to maintain their current behaviour and might\
            \ be deprecated in the future. In addition to providing this parameter,\
            \ make sure that your client properly handles cases of new"
          type: String
          required: false
        responseDescription: |-
          A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.
          When no available devices are found, the request will return a `200 OK` response but with no data populated.
        scopes:
        - user-read-playback-state
        responseTypes:
        - type: CurrentlyPlayingContextObject
          status: 200
        - type: Void
          status: 204
      endpoint-get-recently-played:
        id: endpoint-get-recently-played
        name: Get Current User's Recently Played Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recently-played
        description: |-
          Get tracks from the current user's recently played tracks.
          *Note: Currently doesn't support podcast episodes.*
        httpMethod: GET
        path: /me/player/recently-played
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of a user."
          type: String
          required: true
        - location: QUERY
          name: limit
          description: "The maximum number of items to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: after
          description: "A Unix timestamp in milliseconds. Returns all items after\
            \ (but not including) this cursor position. If `after` is specified, `before`\
            \ must not be specified."
          type: Integer
          required: false
        - location: QUERY
          name: before
          description: "A Unix timestamp in milliseconds. Returns all items before\
            \ (but not including) this cursor position. If `before` is specified,\
            \ `after` must not be specified."
          type: Integer
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).

          If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
        scopes: []
        responseTypes:
        - type: "CursorPagingObject[PlayHistoryObject]"
          status: 200
        - type: Void
          status: 204
      endpoint-get-the-users-currently-playing-track:
        id: endpoint-get-the-users-currently-playing-track
        name: Get the User's Currently Playing Track
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-the-users-currently-playing-track
        description: Get the object currently being played on the user's Spotify account.
        httpMethod: GET
        path: /me/player/currently-playing
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of a user.\
            \ The access token must have the `user-read-currently-playing` and/or\
            \ `user-read-playback-state` scope authorized in order to read information."
          type: String
          required: true
        - location: QUERY
          name: market
          description: |-
            An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          type: String
          required: true
        - location: QUERY
          name: additional_types
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \ An unsupported type in the response is expected to be represented as\
            \ `null` value in the `item` field. **Note** : This parameter was introduced\
            \ to allow existing clients to maintain their current behaviour and might\
            \ be deprecated in the future. In addition to providing this parameter,\
            \ make sure that your client properly handles cases of new types in the\
            \ future by checking against the `currently_playing_type` field."
          type: String
          required: false
        responseDescription: |-
          A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.

          When no available devices are found, the request will return a `200 OK` response but with no data populated.

          When no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.

          If private session is enabled the response will be a `204 NO CONTENT` with an empty payload.
        scopes:
        - user-read-currently-playing
        - user-read-playback-state
        responseTypes:
        - type: CurrentlyPlayingObject
          status: 200
        - type: Void
          status: 204
      endpoint-pause-a-users-playback:
        id: endpoint-pause-a-users-playback
        name: Pause a User's Playback
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-pause-a-users-playback
        description: Pause playback on the user's account.
        httpMethod: PUT
        path: /me/player/pause
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user."
          type: String
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes: []
        responseTypes:
        - type: Void
          status: 204
      endpoint-seek-to-position-in-currently-playing-track:
        id: endpoint-seek-to-position-in-currently-playing-track
        name: Seek To Position In Currently Playing Track
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-seek-to-position-in-currently-playing-track
        description: Seeks to the given position in the user's currently playing track.
        httpMethod: PUT
        path: /me/player/seek
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback"
          type: String
          required: true
        - location: QUERY
          name: position_ms
          description: The position in milliseconds to seek to. Must be a positive
            number. Passing in a position that is greater than the length of the track
            will cause the player to start playing the next song.
          type: Integer
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-set-repeat-mode-on-users-playback:
        id: endpoint-set-repeat-mode-on-users-playback
        name: Set Repeat Mode On User’s Playback
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-repeat-mode-on-users-playback
        description: |-
          Set the repeat mode for the user's playback. Options are repeat-track,
          repeat-context, and off.
        httpMethod: PUT
        path: /me/player/repeat
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback."
          type: String
          required: true
        - location: QUERY
          name: state
          description: "**track** , **context** or **off** .  \n**track** will repeat\
            \ the current track.  \n**context** will repeat the current context. \
            \ \n**off** will turn repeat off."
          type: String
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-set-volume-for-users-playback:
        id: endpoint-set-volume-for-users-playback
        name: Set Volume For User's Playback
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-volume-for-users-playback
        description: Set the volume for the user's current playback device.
        httpMethod: PUT
        path: /me/player/volume
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback."
          type: String
          required: true
        - location: QUERY
          name: volume_percent
          description: The volume to set. Must be a value from 0 to 100 inclusive.
          type: Integer
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-skip-users-playback-to-next-track:
        id: endpoint-skip-users-playback-to-next-track
        name: Skip User’s Playback To Next Track
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-next-track
        description: Skips to next track in the user's queue.
        httpMethod: POST
        path: /me/player/next
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback."
          type: String
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-skip-users-playback-to-previous-track:
        id: endpoint-skip-users-playback-to-previous-track
        name: Skip User’s Playback To Previous Track
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-previous-track
        description: Skips to previous track in the user's queue.
        httpMethod: POST
        path: /me/player/previous
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback."
          type: String
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-start-a-users-playback:
        id: endpoint-start-a-users-playback
        name: Start/Resume a User's Playback
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-start-a-users-playback
        description: Start a new context or resume current playback on the user's
          active device.
        httpMethod: PUT
        path: /me/player/play
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback."
          type: String
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        - location: BODY
          name: context_uri
          description: "Spotify URI of the context to play. Valid contexts are albums,\
            \ artists, playlists. Example: {\"context_uri\": \"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"\
            }"
          type: String
          required: false
        - location: BODY
          name: uris
          description: "A JSON array of the Spotify track URIs to play. For example:\
            \ {\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"\
            ]}"
          type: "Array[String]"
          required: false
        - location: BODY
          name: offset
          description: "Indicates from where in the context playback should start.\
            \ Only available when context_uri corresponds to an album or playlist\
            \ object, or when the uris parameter is used. “position” is zero based\
            \ and can’t be negative. Example: \"offset\": {\"position\": 5} “uri”\
            \ is a string representing the uri of the item to start at. Example: \"\
            offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}"
          type: Object
          required: false
        - location: BODY
          name: position_ms
          description: Indicates from what position to start playback. Must be a positive
            number. Passing in a position that is greater than the length of the track
            will cause the player to start playing the next song.
          type: Integer
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-toggle-shuffle-for-users-playback:
        id: endpoint-toggle-shuffle-for-users-playback
        name: Toggle Shuffle For User’s Playback
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-toggle-shuffle-for-users-playback
        description: Toggle shuffle on or off for user's playback.
        httpMethod: PUT
        path: /me/player/shuffle
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback."
          type: String
          required: true
        - location: QUERY
          name: state
          description: "**true** : Shuffle user's playback.  \n**false** : Do not\
            \ shuffle user's playback."
          type: Boolean
          required: true
        - location: QUERY
          name: device_id
          description: "The id of the device this command is targeting. If not supplied,\
            \ the user's currently active device is the target."
          type: String
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
      endpoint-transfer-a-users-playback:
        id: endpoint-transfer-a-users-playback
        name: Transfer a User's Playback
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-transfer-a-users-playback
        description: Transfer playback to a new device and determine if it should
          start playing.
        httpMethod: PUT
        path: /me/player
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nThe access token must have been issued on behalf of\
            \ a user.  \nThe access token must have the `user-modify-playback-state`\
            \ scope authorized in order to control playback."
          type: String
          required: true
        - location: BODY
          name: device_ids
          description: "A JSON array containing the ID of the device on which playback\
            \ should be started/transferred.  \nFor example:`{device_ids:[\"74ASZWbe4lXaubB36ztrGX\"\
            ]}`  \nNote: Although an array is accepted, only a single device_id is\
            \ currently supported. Supplying more than one will return `400 Bad Request`"
          type: "Array[String]"
          required: true
        - location: BODY
          name: play
          description: "**true** : ensure playback happens on new device.  \n**false**\
            \ or not provided: keep the current playback state."
          type: Boolean
          required: false
        responseDescription: |-
          A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.

          If the device is not found, the request will return `404 NOT FOUND` response code.

          If the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.
        scopes:
        - user-modify-playback-state
        responseTypes:
        - type: Void
          status: 204
  category-playlists:
    id: category-playlists
    name: Playlists API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-playlists
    endpoints:
      endpoint-add-tracks-to-playlist:
        id: endpoint-add-tracks-to-playlist
        name: Add Items to a Playlist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist
        description: Add one or more items to a user's playlist.
        httpMethod: POST
        path: "/playlists/{playlist_id}/tracks"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user.  \nAdding items to the current user's public playlists requires\
            \ authorization of the `playlist-modify-public` scope; adding items to\
            \ the current user's private playlist (including collaborative playlists)\
            \ requires the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if URIs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
          type: String
          required: true
        - location: QUERY
          name: position
          description: "The position to insert the items, a zero-based index. For\
            \ example, to insert the items in the first position: `position=0`; to\
            \ insert the items in the third position: `position=2` . If omitted, the\
            \ items will be appended to the playlist. Items are added in the order\
            \ they are listed in the query string or request body."
          type: Integer
          required: false
        - location: QUERY
          name: uris
          description: "A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to add, can be track or episode URIs. For example:  \n`uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,\
            \ spotify:track:1301WleyT98MSxVHPZCA6M, spotify:episode:512ojhOuo1ktJprKbVcKyQ`\
            \  \nA maximum of 100 items can be added in one request. *Note: it is\
            \ likely that passing a large number of item URIs as a query parameter\
            \ will exceed the maximum length of the request URI. When adding a large\
            \ number of items, it is recommended to pass them in the request body,\
            \ see below.*"
          type: String
          required: false
        - location: BODY
          name: uris
          description: "A JSON array of the [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to add. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\"\
            ,\"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:episode:512ojhOuo1ktJprKbVcKyQ\"\
            ]}`  \nA maximum of 100 items can be added in one request. *Note: if the\
            \ `uris` parameter is present in the query string, any URIs listed here\
            \ in the body will be ignored.*"
          type: "Array[String]"
          required: false
        - location: BODY
          name: position
          description: "The position to insert the items, a zero-based index. For\
            \ example, to insert the items in the first position: `position=0` ; to\
            \ insert the items in the third position: `position=2`. If omitted, the\
            \ items will be appended to the playlist. Items are added in the order\
            \ they appear in the uris array. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\"\
            ,\"spotify:track:1301WleyT98MSxVHPZCA6M\"], \"position\": 3}`"
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `201` Created. The response body contains a `snapshot_id` in JSON format.\
          \ The `snapshot_id` can be used to identify your playlist version in future\
          \ requests. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Trying to add an item when you do not have the user's authorization, or\
          \ when there are more than 10.000 items in the playlist, returns error `403`\
          \ Forbidden."
        scopes:
        - playlist-modify-public
        - playlist-modify-private
        responseTypes:
        - type: SnapshotIdObject
          status: 201
      endpoint-change-playlist-details:
        id: endpoint-change-playlist-details
        name: Change a Playlist's Details
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-change-playlist-details
        description: |-
          Change a playlist's name and public/private state. (The user must, of
          course, own the playlist.)
        httpMethod: PUT
        path: "/playlists/{playlist_id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user.  \nChanging a public playlist for a user requires authorization\
            \ of the `playlist-modify-public` scope; changing a private playlist requires\
            \ the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "The content type of the request body: `application/json`"
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
          type: String
          required: true
        - location: BODY
          name: name
          description: "The new name for the playlist, for example `\"My New Playlist\
            \ Title\"`"
          type: String
          required: false
        - location: BODY
          name: public
          description: "If `true` the playlist will be public, if `false` it will\
            \ be private."
          type: Boolean
          required: false
        - location: BODY
          name: collaborative
          description: "If `true` , the playlist will become collaborative and other\
            \ users will be able to modify the playlist in their Spotify client. *Note:\
            \ You can only set `collaborative` to `true` on non-public playlists.*"
          type: Boolean
          required: false
        - location: BODY
          name: description
          description: Value for playlist description as displayed in Spotify Clients
            and in the Web API.
          type: String
          required: false
        responseDescription: |-
          On success the HTTP status code in the response header is `200` OK.

          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.
        scopes:
        - playlist-modify-public
        - playlist-modify-private
        responseTypes:
        - type: Void
          status: 200
      endpoint-create-playlist:
        id: endpoint-create-playlist
        name: Create a Playlist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-create-playlist
        description: |-
          Create a playlist for a Spotify user. (The playlist will be empty until
          you [add tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist).)
        httpMethod: POST
        path: "/users/{user_id}/playlists"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user. Creating a public playlist for a user requires authorization of\
            \ the `playlist-modify-public` scope; creating a private playlist requires\
            \ the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "The content type of the request body: `application/json`"
          type: String
          required: false
        - location: PATH
          name: user_id
          description: "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
          type: String
          required: true
        - location: BODY
          name: name
          description: "The name for the new playlist, for example `\"Your Coolest\
            \ Playlist\"` . This name does not need to be unique; a user may have\
            \ several playlists with the same name."
          type: String
          required: true
        - location: BODY
          name: public
          description: "Defaults to `true` . If `true` the playlist will be public,\
            \ if `false` it will be private. To be able to create private playlists,\
            \ the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)"
          type: Boolean
          required: false
        - location: BODY
          name: collaborative
          description: "Defaults to `false` . If `true` the playlist will be collaborative.\
            \ Note that to create a collaborative playlist you must also set `public`\
            \ to `false` . To create collaborative playlists you must have granted\
            \ `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ ."
          type: Boolean
          required: false
        - location: BODY
          name: description
          description: value for playlist description as displayed in Spotify Clients
            and in the Web API.
          type: String
          required: false
        responseDescription: |-
          On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)
          in JSON format and the HTTP status code in the response header is `200` OK or
          `201` Created. There is also a `Location` response header giving the Web API
          endpoint for the new playlist.

          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.
        scopes:
        - playlist-modify-public
        - playlist-modify-private
        responseTypes:
        - type: PlaylistObject
          status: 200
        - type: PlaylistObject
          status: 201
      endpoint-get-a-list-of-current-users-playlists:
        id: endpoint-get-a-list-of-current-users-playlists
        name: Get a List of Current User's Playlists
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists
        description: |-
          Get a list of the playlists owned or followed by the current Spotify
          user.
        httpMethod: GET
        path: /me/playlists
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nPrivate playlists are only retrievable *for the current\
            \ user* and requires the `playlist-read-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ to have been authorized by the user. Note that this scope alone will\
            \ not return collaborative playlists, even though they are always private.\
            \  \nCollaborative playlists are only retrievable *for the current user*\
            \ and requires the `playlist-read-collaborative` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ to have been authorized by the user."
          type: String
          required: true
        - location: QUERY
          name: limit
          description: "'The maximum number of playlists to return. Default: 20. Minimum:\
            \ 1. Maximum: 50.'"
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "'The index of the first playlist to return. Default: 0 (the\
            \ first object). Maximum offset: 100.000. Use with `limit` to get the\
            \ next set of playlists.'"
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an array of simplified [playlist\
          \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)\
          \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Please note that the access token has to be tied to a user."
        scopes:
        - playlist-read-private
        - playlist-read-collaborative
        responseTypes:
        - type: "PagingObject[SimplifiedPlaylistObject]"
          status: 200
      endpoint-get-list-users-playlists:
        id: endpoint-get-list-users-playlists
        name: Get a List of a User's Playlists
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-list-users-playlists
        description: Get a list of the playlists owned or followed by a Spotify user.
        httpMethod: GET
        path: "/users/{user_id}/playlists"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details.  \nPrivate playlists are only retrievable *for the current\
            \ user* and requires the `playlist-read-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ to have been authorized by the user. Note that this scope alone will\
            \ not return collaborative playlists, even though they are always private.\
            \  \nCollaborative playlists are only retrievable *for the current user*\
            \ and requires the `playlist-read-collaborative` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)\
            \ to have been authorized by the user."
          type: String
          required: true
        - location: PATH
          name: user_id
          description: "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
          type: String
          required: true
        - location: QUERY
          name: limit
          description: "The maximum number of playlists to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first playlist to return. Default: 0 (the\
            \ first object). Maximum offset: 100.000. Use with `limit` to get the\
            \ next set of playlists."
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an array of simplified [playlist\
          \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)\
          \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes:
        - playlist-read-private
        - playlist-read-collaborative
        responseTypes:
        - type: "PagingObject[SimplifiedPlaylistObject]"
          status: 200
      endpoint-get-playlist:
        id: endpoint-get-playlist
        name: Get a Playlist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist
        description: Get a playlist owned by a Spotify user.
        httpMethod: GET
        path: "/playlists/{playlist_id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. Both Public and Private playlists belonging to any user\
            \ are retrievable on provision of a valid access token."
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`. Provide this parameter if you want to apply\
            \ [Track\nRelinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).\
            \ For episodes, if a valid user access token is specified in the request\
            \ header, the country associated with the user account will take priority\
            \ over this parameter.  \n*Note: If neither market or user country are\
            \ provided, the episode is considered unavailable for the client.*"
          type: String
          required: false
        - location: QUERY
          name: fields
          description: "Filters for the query: a comma-separated list of the fields\
            \ to return. If omitted, all fields are returned. For example, to get\
            \ just the playlist''s description and URI: `fields=description,uri`.\
            \ A dot separator can be used to specify non-reoccurring fields, while\
            \ parentheses can be used to specify reoccurring fields within objects.\
            \ For example, to get just the added date and user ID of the adder: `fields=tracks.items(added_at,added_by.id)`.\
            \ Use multiple parentheses to drill down into nested objects, for example:\
            \ `fields=tracks.items(track(name,href,album(name,href)))`. Fields can\
            \ be excluded by prefixing them with an exclamation mark, for example:\
            \ `fields=tracks.items(track(name,href,album(!name,href)))`"
          type: String
          required: false
        - location: QUERY
          name: additional_types
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \ **Note** : This parameter was introduced to allow existing clients to\
            \ maintain their current behaviour and might be deprecated in the future.\
            \ In addition to providing this parameter, make sure that your client\
            \ properly handles cases of new types in the future by checking against\
            \ the `type` field of each object."
          type: String
          required: false
        responseDescription: "On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\
          \ in JSON format and the HTTP status code in the response header is `200`\
          \ OK. If an episode is unavailable in the given `market`, its information\
          \ will not be included in the response. On error, the header status code\
          \ is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Requesting playlists that you do not have the user's authorization to\
          \ access returns error `403` Forbidden."
        scopes: []
        responseTypes:
        - type: PlaylistObject
          status: 200
      endpoint-get-playlist-cover:
        id: endpoint-get-playlist-cover
        name: Get a Playlist Cover Image
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist-cover
        description: Get the current image associated with a specific playlist.
        httpMethod: GET
        path: "/playlists/{playlist_id}/images"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user.  \nThis access token must be issued on behalf of the user.   \n\
            Current playlist image for both Public and Private playlists of any user\
            \ are retrievable on provision of a valid access token."
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
          type: String
          required: true
        responseDescription: "On success, the response body contains a list of [image\
          \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject)\
          \ in JSON format and the HTTP status code in the response header is `200`\
          \ OK  \nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes: []
        responseTypes:
        - type: "Array[ImageObject]"
          status: 200
      endpoint-get-playlists-tracks:
        id: endpoint-get-playlists-tracks
        name: Get a Playlist's Items
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlists-tracks
        description: Get full details of the items of a playlist owned by a Spotify
          user.
        httpMethod: GET
        path: "/playlists/{playlist_id}/tracks"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. Both Public and Private playlists belonging to any user\
            \ are retrievable on provision of a valid access token."
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`. Provide this parameter if you want to apply\
            \ [Track\nRelinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).\
            \ For episodes, if a valid user access token is specified in the request\
            \ header, the country associated with the user account will take priority\
            \ over this parameter.  \n*Note: If neither market or user country are\
            \ provided, the episode is considered unavailable for the client.*"
          type: String
          required: false
        - location: QUERY
          name: fields
          description: "Filters for the query: a comma-separated list of the fields\
            \ to return. If omitted, all fields are returned. For example, to get\
            \ just the total number of items and the request limit:  \n`fields=total,limit`\
            \  \nA dot separator can be used to specify non-reoccurring fields, while\
            \ parentheses can be used to specify reoccurring fields within objects.\
            \ For example, to get just the added date and user ID of the adder:  \n\
            `fields=items(added_at,added_by.id)`  \nUse multiple parentheses to drill\
            \ down into nested objects, for example:  \n`fields=items(track(name,href,album(name,href)))`\
            \  \nFields can be excluded by prefixing them with an exclamation mark,\
            \ for example:  \n`fields=items.track.album(!external_urls,images)`"
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of items to return. Default: 100. Minimum:\
            \ 1. Maximum: 100."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first item to return. Default: 0 (the first\
            \ object)."
          type: Integer
          required: false
        - location: QUERY
          name: additional_types
          description: "A comma-separated list of item types that your client supports\
            \ besides the default `track` type. Valid types are: `track` and `episode`.\
            \ **Note** : This parameter was introduced to allow existing clients to\
            \ maintain their current behaviour and might be deprecated in the future.\
            \ In addition to providing this parameter, make sure that your client\
            \ properly handles cases of new types in the future by checking against\
            \ the `type` field of each object."
          type: String
          required: false
        responseDescription: "On success, the response body contains an array of [track\
          \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject)\
          \ and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject)\
          \ (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)\
          \ in JSON format and the HTTP status code in the response header is `200`\
          \ OK. If an episode is unavailable in the given `market`, its information\
          \ will not be included in the response. On error, the header status code\
          \ is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ Requesting playlists that you do not have the user's authorization to\
          \ access returns error `403` Forbidden."
        scopes: []
        responseTypes:
        - type: "PagingObject[PlaylistTrackObject]"
          status: 200
      endpoint-remove-tracks-playlist:
        id: endpoint-remove-tracks-playlist
        name: Remove Items from a Playlist
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-playlist
        description: Remove one or more items from a user's playlist.
        httpMethod: DELETE
        path: "/playlists/{playlist_id}/tracks"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user. Removing items from a user's public playlist requires authorization\
            \ of the `playlist-modify-public` scope; removing items from a private\
            \ playlist requires the `playlist-modify-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "The content type of the request body: `application/json`"
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)"
          type: String
          required: true
        - location: BODY
          name: tracks
          description: "An array of objects containing [Spotify URIs](https://developer.spotify.com/spotify-documentation/web-api/#spotify-uris-and-ids)\
            \ of the tracks or episodes to remove. For example: `{ \"tracks\": [{\
            \ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"\
            \ }] }`. A maximum of 100 objects can be sent at once."
          type: "Array[String]"
          required: true
        - location: BODY
          name: snapshot_id
          description: "The playlist's snapshot ID against which you want to make\
            \ the changes. The API will validate that the specified items exist and\
            \ in the specified positions and make the changes, even if more recent\
            \ changes have been made to the playlist."
          type: String
          required: false
        responseDescription: |-
          On success, the response body contains a `snapshot_id` in JSON format
          and the HTTP status code in the response header is `200` OK. The `snapshot_id`
          can be used to identify your playlist version in future requests.

          On error, the header status code is an [error code](https://developer.spotify.com/spotify-documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/spotify-documentation/web-api/#response-schema).
          Trying to remove an item when you do not have the user's authorization returns error `403` Forbidden.
          Attempting to use several different ways to remove items returns `400` Bad Request.
          Other client errors returning `400` Bad Request include specifying invalid positions.
        scopes:
        - playlist-modify-public
        - playlist-modify-private
        notes: |-
          ### Frequently Asked Questions:

          - **Is it possible to delete a playlist?**
            No, it isn't. The reason there is no endpoint for this is explained in our Working With Playlists Guide in the section [Following and Unfollowing a Playlist](https://developer.spotify.com/documentation/general/guides/working-with-playlists/#following-and-unfollowing-a-playlist).

          - **Can I use `X-HTTP-Method-Override` or similar to send a DELETE request overriding the HTTP verb?**
            Not at the moment, the delete operation needs to be specified through a DELETE request.
        responseTypes:
        - type: SnapshotIdObject
          status: 200
      endpoint-reorder-or-replace-playlists-tracks:
        id: endpoint-reorder-or-replace-playlists-tracks
        name: Reorder or Replace a Playlist's Items
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks
        description: |-
          Either reorder or replace items in a playlist depending on the request's parameters.
          To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
          To replace items, include `uris` as either a query parameter or in the request's body.
          Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.


          **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
          These operations can't be applied together in a single request.
        httpMethod: PUT
        path: "/playlists/{playlist_id}/tracks"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user.   \nReordering or replacing items in the current user's public\
            \ playlists requires authorization of the `playlist-modify-public` scope;\
            \ reordering or replacing items in the current user's private playlist\
            \ (including collaborative playlists) requires the `playlist-modify-private`\
            \ scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "*Required if URIs are passed in the request body, otherwise\
            \ ignored.* The content type of the request body: `application/json`"
          type: String
          required: false
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
          type: String
          required: true
        - location: QUERY
          name: uris
          description: "A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`\
            \  \nA maximum of 100 items can be set in one request."
          type: String
          required: false
        - location: BODY
          name: uris
          description: "A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`\
            \  \nA maximum of 100 items can be set in one request."
          type: "Array[String]"
          required: false
        - location: BODY
          name: range_start
          description: The position of the first item to be reordered.
          type: Integer
          required: false
        - location: BODY
          name: insert_before
          description: "The position where the items should be inserted.  \nTo reorder\
            \ the items to the end of the playlist, simply set *insert_before* to\
            \ the position after the last item.  \nExamples:  \nTo reorder the first\
            \ item to the last position in a playlist with 10 items, set *range_start*\
            \ to 0, and *insert_before* to 10.  \nTo reorder the last item in a playlist\
            \ with 10 items to the start of the playlist, set *range_start* to 9,\
            \ and *insert_before* to 0."
          type: Integer
          required: false
        - location: BODY
          name: range_length
          description: "The amount of items to be reordered. Defaults to 1 if not\
            \ set.  \nThe range of items to be reordered begins from the *range_start*\
            \ position, and includes the *range_length* subsequent items.  \nExample:\
            \  \nTo move the items at index 9-10 to the start of the playlist, *range_start*\
            \ is set to 9, and *range_length* is set to 2."
          type: Integer
          required: false
        - location: BODY
          name: snapshot_id
          description: The playlist's snapshot ID against which you want to make the
            changes.
          type: String
          required: false
        responseDescription: |-
          On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format
          and the HTTP status code in the response header is `200` OK. The `snapshot_id`
          can be used to identify your playlist version in future requests.

          On a successful **replace** operation, the HTTP status code in the response header is `201`
          Created.

          On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),
          the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),
          and the existing playlist is unmodified.
          Trying to set an item when you do not have the user's authorization returns error `403` Forbidden.
        scopes:
        - playlist-modify-public
        - playlist-modify-private
        responseTypes:
        - type: SnapshotIdObject
          status: 200
        - type: SnapshotIdObject
          status: 201
      endpoint-upload-custom-playlist-cover:
        id: endpoint-upload-custom-playlist-cover
        name: Upload a Custom Playlist Cover Image
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-upload-custom-playlist-cover
        description: Replace the image used to represent a specific playlist.
        httpMethod: PUT
        path: "/playlists/{playlist_id}/images"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ user.  \nThis access token must be tied to the user who owns the playlist,\
            \ and must have the scope `ugc-image-upload` granted. In addition, the\
            \ token must also contain `playlist-modify-public` and/or `playlist-modify-private`,\
            \ depending the public status of the playlist you want to update . See\
            \ [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        - location: HEADER
          name: Content-Type
          description: "The content type of the request body: `image/jpeg`"
          type: String
          required: true
        - location: PATH
          name: playlist_id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the playlist."
          type: String
          required: true
        responseDescription: |-
          If you get status code `429`, it means that you have sent too many requests.
          If this happens, have a look in the `Retry-After` header, where you will see a number displayed.
          This is the amount of seconds that you need to wait, before you can retry sending your requests.
        scopes:
        - ugc-image-upload
        - playlist-modify-public
        - playlist-modify-private
        notes: |-
          The request should contain a Base64 encoded JPEG image data, maximum payload size is 256 KB.

          **Rate Limiting:** If you get status code `429`, it means that you have sent too many requests.
          If this happens, have a look in the `Retry-After` header, where you will see a number displayed. This is the amount of seconds that you need to wait, before you can retry sending your requests.
        responseTypes:
        - type: Void
          status: 202
  category-search:
    id: category-search
    name: Search API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-search
    endpoints:
      endpoint-search:
        id: endpoint-search
        name: Search for an Item
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-search
        description: |-
          Get Spotify Catalog information about albums, artists, playlists, tracks, shows or episodes
          that match a keyword string.
        httpMethod: GET
        path: /search
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: QUERY
          name: q
          description: "Search [query](#writing-a-query---guidelines) keywords and\
            \ optional field filters and operators.   \nFor example:   \n`q=roadhouse%20blues`."
          type: String
          required: true
        - location: QUERY
          name: type
          description: "A comma-separated list of item types to search across.   \n\
            Valid types are: `album` , `artist`, `playlist`, `track`, `show` and `episode`.\
            \   \nSearch results include hits from all the specified item types. \
            \  \nFor example: `q=name:abacab&type=album,track` returns both albums\
            \ ***and*** tracks with \"abacab\" included in their name."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`.   \nIf a country code is specified, only\
            \ content that is playable in that market is returned.   \n**Note** :\
            \   \n- Playlist results are not affected by the market parameter.   \n\
            - If market is set to `from_token`, and a valid access token is specified\
            \ in the request header, only content playable in the country associated\
            \ with the user account, is returned.   \n- Users can view the country\
            \ that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).\
            \ A user must grant access to the `user-read-private` scope prior to when\
            \ the access token is issued."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "Maximum number of results to return.   \nDefault: 20   \n\
            Minimum: 1   \nMaximum: 50   \n**Note** : The limit is applied within\
            \ each type, not on the total response.   \nFor example, if the limit\
            \ value is 3 and the type is `artist,album`, the response contains 3 artists\
            \ and 3 albums."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first result to return.   \nDefault: 0 (the\
            \ first result).   \nMaximum offset (including limit): 1,000.   \nUse\
            \ with limit to get the next page of search results."
          type: Integer
          required: false
        - location: QUERY
          name: include_external
          description: "Possible values: *audio*   \nIf *include_external=audio* is\
            \ specified the response will include any relevant audio content that\
            \ is hosted externally.   \nBy default external content is filtered out\
            \ from responses."
          type: String
          required: false
        responseDescription: |-
          **On success**:

          - In the response ***header*** the HTTP status code is `200` OK.
          - For each type provided in the `type` parameter, the response ***body*** contains an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) / [simplified album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) / [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) / [simplified show objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject) / [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON.

          **On error**:

          - The ***header*** status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes).
          - The response ***body*** contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        notes: |-
          **Writing a Query - Guidelines**

          **Encode spaces** with the hex code `%20` or `+`.

          **Keyword matching** : Matching of search keywords is *not* case-sensitive. Operators, however, should be specified in uppercase.
          Unless surrounded by double quotation marks, keywords are matched in any order. For example:
          `q=roadhouse&20blues` matches both "Blues Roadhouse" and "Roadhouse of the Blues".
          `q="roadhouse&20blues"` matches "My Roadhouse Blues" but not "Roadhouse of the Blues".

          Searching for **playlists** returns results where the query keyword(s) match any part of the playlist's name or description. Only popular public playlists are returned.

          **Operator**: The operator NOT can be used to exclude results.

          For example: `q=roadhouse%20NOT%20blues` returns items that match "roadhouse" but excludes those that also contain the keyword "blues".

          *Note*: The operator must be specified in uppercase. Otherwise, they are handled as normal keywords to be matched.

          **Field filters** : By default, results are returned when a match is found in *any* field of the target object type. Searches can be made more specific by specifying an `album`, `artist` or `track` field filter.

          For example: The query `q=album:gold%20artist:abba&type=album` returns only albums with the text "gold" in the album name and the text "abba" in the artist name.

          To limit the results to a particular `year`, use the field filter year with album, artist, and track searches.

          For example: `q=bob%20year:2014`

          Or with a date range. For example: `q=bob%20year:1980-2020`

          To retrieve only albums released in the last two weeks, use the field filter tag:new in album searches.

          To retrieve only albums with the lowest 10% popularity, use the field filter tag:hipster in album searches.
          *Note*: This field filter only works with album searches.

          Depending on object types being searched for, other field filters, include genre (applicable to tracks and artists), `upc`, and `isrc`.
          For example: `q=lil%20genre:%22southern%20hip%20hop%22&type=artist`.
          Use double quotation marks around the genre keyword string if it contains spaces.

          **Notes**

          - Currently, you cannot fetch sorted results.
          - You cannot search for playlists that contain a certain track.
          - You can search only one genre at a time.
          - You cannot search for playlists within a user's library.
          - In an effort to keep the response small, but include as much information as possible, Spotify has expanded the response and intends to continue and improve the Search endpoint.
          - To query based on a release date query at a year level using the year scope. For example:

            The query

            `https://api.spotify.com/v1/search?q=bob%20year:2014&type=album`

            Returns albums released in 2014 with their names or artist names containing "bob". You can also use the tag:new field filter to get just these albums, as well as compilations and singles, released in the last 2 weeks.
        responseTypes:
        - type: SearchResponseObject
          status: 200
  category-shows:
    id: category-shows
    name: Shows API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-shows
    endpoints:
      endpoint-get-a-show:
        id: endpoint-get-a-show
        name: Get a Show
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-show
        description: |-
          Get Spotify catalog information for a single show identified by its
          unique Spotify ID.
        httpMethod: GET
        path: "/shows/{id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only shows and episodes that are available\
            \ in that market will be returned.  \nIf a valid user access token is\
            \ specified in the request header, the country associated with the user\
            \ account will take priority over this parameter.  \n*Note: If neither\
            \ market or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
          type: String
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200`\nOK and the response body contains a [show object](https://developer.spotify.com/documentation/web-api/reference/#object-showobject)\n\
          in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\n\
          and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \  \n\nIf a show is unavailable in the given `market` the HTTP status code\
          \ in the response header is `404` NOT FOUND."
        scopes: []
        responseTypes:
        - type: ShowObject
          status: 200
      endpoint-get-a-shows-episodes:
        id: endpoint-get-a-shows-episodes
        name: Get a Show's Episodes
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-shows-episodes
        description: Get Spotify catalog information about an show's episodes. Optional
          parameters can be used to limit the number of episodes returned.
        httpMethod: GET
        path: "/shows/{id}/episodes"
        parameters:
        - location: HEADER
          name: Authorization
          description: "valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the show."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only shows and episodes that are available\
            \ in that market will be returned.  \nIf a valid user access token is\
            \ specified in the request header, the country associated with the user\
            \ account will take priority over this parameter.  \n*Note: If neither\
            \ market or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
          type: String
          required: false
        - location: QUERY
          name: limit
          description: "The maximum number of episodes to return. Default: 20. Minimum:\
            \ 1. Maximum: 50."
          type: Integer
          required: false
        - location: QUERY
          name: offset
          description: "The index of the first episode to return. Default: 0 (the\
            \ first object). Use with limit to get the next set of episodes."
          type: Integer
          required: false
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains an array of [simplified episode\
          \ objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject)\
          \ (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject))\
          \ in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).\
          \  \n\nIf a show is unavailable in the given `market` the HTTP status code\
          \ in the response header is `404` NOT FOUND. Unavailable episodes are filtered\
          \ out."
        scopes: []
        responseTypes:
        - type: "PagingObject[SimplifiedEpisodeObject]"
          status: 200
      endpoint-get-multiple-shows:
        id: endpoint-get-multiple-shows
        name: Get Multiple Shows
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-shows
        description: Get Spotify catalog information for several shows based on their
          Spotify IDs.
        httpMethod: GET
        path: /shows
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the shows. Maximum: 50 IDs."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).\
            \ If a country code is specified, only shows and episodes that are available\
            \ in that market will be returned.  \nIf a valid user access token is\
            \ specified in the request header, the country associated with the user\
            \ account will take priority over this parameter.  \n*Note: If neither\
            \ market or user country are provided, the content is considered unavailable\
            \ for the client.*   \nUsers can view the country that is associated with\
            \ their account in the [account settings](https://www.spotify.com/se/account/overview/)."
          type: String
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200`
          OK and the response body contains an object whose key is `shows` and whose
          value is an array of [simple show object](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject)
          in JSON format.

          Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. If a show is unavailable in the given `market`, a `null` value is returned. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        responseTypes:
        - type: ShowsObject
          status: 200
  category-tracks:
    id: category-tracks
    name: Tracks API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-tracks
    endpoints:
      endpoint-get-audio-analysis:
        id: endpoint-get-audio-analysis
        name: Get Audio Analysis for a Track
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-audio-analysis
        description: |-
          Get a detailed audio analysis for a single track identified by its unique
          Spotify ID.
        httpMethod: GET
        path: "/audio-analysis/{id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200 OK` and the response body contains an audio analysis object in\
          \ JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes: []
        responseTypes:
        - type: AudioAnalysisObject
          status: 200
      endpoint-get-audio-features:
        id: endpoint-get-audio-features
        name: Get Audio Features for a Track
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-audio-features
        description: |-
          Get audio feature information for a single track identified by its unique
          Spotify ID.
        httpMethod: GET
        path: "/audio-features/{id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200 OK` and the response body contains an [audio features object](https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject)\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema)."
        scopes: []
        responseTypes:
        - type: AudioFeaturesObject
          status: 200
      endpoint-get-several-audio-features:
        id: endpoint-get-several-audio-features
        name: Get Audio Features for Several Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-audio-features
        description: Get audio features for multiple tracks based on their Spotify
          IDs.
        httpMethod: GET
        path: /audio-features
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the tracks. Maximum: 100 IDs."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200 OK`
          and the response body contains an object whose key is `"audio_features"` and
          whose value is an array of audio features objects in JSON format.

          Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        responseTypes:
        - type: AudioFeaturesArrayObject
          status: 200
      endpoint-get-several-tracks:
        id: endpoint-get-several-tracks
        name: Get Several Tracks
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-tracks
        description: Get Spotify catalog information for multiple tracks based on
          their Spotify IDs.
        httpMethod: GET
        path: /tracks
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: QUERY
          name: ids
          description: "A comma-separated list of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the tracks. Maximum: 50 IDs."
          type: String
          required: true
        - location: QUERY
          name: market
          description: "An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\
            \ or the string `from_token`. Provide this parameter if you want to apply\
            \ [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)."
          type: String
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200`
          OK and the response body contains an object whose key is `tracks` and whose
          value is an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)
          in JSON format.

          Objects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        responseTypes:
        - type: TracksObject
          status: 200
      endpoint-get-track:
        id: endpoint-get-track
        name: Get a Track
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-track
        description: |-
          Get Spotify catalog information for a single track identified by its
          unique Spotify ID.
        httpMethod: GET
        path: "/tracks/{id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: PATH
          name: id
          description: "The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)\
            \ for the track."
          type: String
          required: true
        - location: QUERY
          name: market
          description: |-
            An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or the string `from_token`. Provide this parameter if you want to apply [Track
            Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/).
          type: String
          required: false
        responseDescription: |-
          On success, the HTTP status code in the response header is `200`
          OK and the response body contains a [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)
          in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)
          and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).
        scopes: []
        responseTypes:
        - type: TrackObject
          status: 200
  category-users-profile:
    id: category-users-profile
    name: Users Profile API
    link: https://developer.spotify.com/documentation/web-api/reference/#category-users-profile
    endpoints:
      endpoint-get-current-users-profile:
        id: endpoint-get-current-users-profile
        name: Get Current User's Profile
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile
        description: |-
          Get detailed profile information about the current user (including the
          current user's username).
        httpMethod: GET
        path: /me
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details. The access token must have been issued on behalf of the\
            \ current user.  \nReading the user's email address requires the `user-read-email`\
            \ scope; reading country, product subscription level and explicit content\
            \ settings requires the `user-read-private` scope. See [Using Scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)."
          type: String
          required: true
        responseDescription: |-
          On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). When requesting fields that you don't have the user's authorization to access, it will return error `403` Forbidden.

          **Important!** If the `user-read-email` scope is authorized, the returned JSON will include the email address that was entered when the user created their Spotify account. **This email address is unverified**; do not assume that the email address belongs to the user.
        scopes:
        - user-read-email
        - user-read-private
        responseTypes:
        - type: PrivateUserObject
          status: 200
      endpoint-get-users-profile:
        id: endpoint-get-users-profile
        name: Get a User's Profile
        link: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-profile
        description: Get public profile information about a Spotify user.
        httpMethod: GET
        path: "/users/{user_id}"
        parameters:
        - location: HEADER
          name: Authorization
          description: "A valid access token from the Spotify Accounts service: see\
            \ the [Web API Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/)\
            \ for details."
          type: String
          required: true
        - location: PATH
          name: user_id
          description: "The user's [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)."
          type: String
          required: true
        responseDescription: "On success, the HTTP status code in the response header\
          \ is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject)\
          \ in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\
          \ and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\
          \ If a user with that user_id doesn't exist, the status code is `404` NOT\
          \ FOUND."
        scopes: []
        responseTypes:
        - type: PublicUserObject
          status: 200
scopes:
  url: https://developer.spotify.com/documentation/general/guides/scopes
  scopes:
    app-remote-control:
      id: app-remote-control
      link: https://developer.spotify.com/documentation/general/guides/scopes/#app-remote-control
      description: Remote control playback of Spotify. This scope is currently available
        to Spotify iOS and Android SDKs.
      userDescription: Communicate with the Spotify app on your device.
      endpoints:
      - url: https://developer.spotify.com/documentation/ios/
        api: ios
      - url: https://developer.spotify.com/documentation/android/
        api: android
    playlist-modify-private:
      id: playlist-modify-private
      link: https://developer.spotify.com/documentation/general/guides/scopes/#playlist-modify-private
      description: Write access to a user's private playlists.
      userDescription: Manage your private playlists.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-playlist
        api: web-api
        endpoint: endpoint-follow-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-playlist
        api: web-api
        endpoint: endpoint-unfollow-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist
        api: web-api
        endpoint: endpoint-add-tracks-to-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-change-playlist-details
        api: web-api
        endpoint: endpoint-change-playlist-details
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-create-playlist
        api: web-api
        endpoint: endpoint-create-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-playlist
        api: web-api
        endpoint: endpoint-remove-tracks-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks
        api: web-api
        endpoint: endpoint-reorder-or-replace-playlists-tracks
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks
        api: web-api
        endpoint: endpoint-reorder-or-replace-playlists-tracks
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-upload-custom-playlist-cover
        api: web-api
        endpoint: endpoint-upload-custom-playlist-cover
    playlist-modify-public:
      id: playlist-modify-public
      link: https://developer.spotify.com/documentation/general/guides/scopes/#playlist-modify-public
      description: Write access to a user's public playlists.
      userDescription: Manage your public playlists.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-playlist
        api: web-api
        endpoint: endpoint-follow-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-playlist
        api: web-api
        endpoint: endpoint-unfollow-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist
        api: web-api
        endpoint: endpoint-add-tracks-to-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-change-playlist-details
        api: web-api
        endpoint: endpoint-change-playlist-details
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-create-playlist
        api: web-api
        endpoint: endpoint-create-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-playlist
        api: web-api
        endpoint: endpoint-remove-tracks-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks
        api: web-api
        endpoint: endpoint-reorder-or-replace-playlists-tracks
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks
        api: web-api
        endpoint: endpoint-reorder-or-replace-playlists-tracks
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-upload-custom-playlist-cover
        api: web-api
        endpoint: endpoint-upload-custom-playlist-cover
    playlist-read-collaborative:
      id: playlist-read-collaborative
      link: https://developer.spotify.com/documentation/general/guides/scopes/#playlist-read-collaborative
      description: Include collaborative playlists when requesting a user's playlists.
      userDescription: Access your collaborative playlists.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists
        api: web-api
        endpoint: endpoint-get-a-list-of-current-users-playlists
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-list-users-playlists
        api: web-api
        endpoint: endpoint-get-list-users-playlists
    playlist-read-private:
      id: playlist-read-private
      link: https://developer.spotify.com/documentation/general/guides/scopes/#playlist-read-private
      description: Read access to user's private playlists.
      userDescription: Access your private playlists.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-if-user-follows-playlist
        api: web-api
        endpoint: endpoint-check-if-user-follows-playlist
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists
        api: web-api
        endpoint: endpoint-get-a-list-of-current-users-playlists
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-list-users-playlists
        api: web-api
        endpoint: endpoint-get-list-users-playlists
    streaming:
      id: streaming
      link: https://developer.spotify.com/documentation/general/guides/scopes/#streaming
      description: Control playback of a Spotify track. This scope is currently available
        to the Web Playback SDK. The user must have a Spotify Premium account.
      userDescription: Play content and control playback on your other devices.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-playback-sdk/
        api: web-playback-sdk
    ugc-image-upload:
      id: ugc-image-upload
      link: https://developer.spotify.com/documentation/general/guides/scopes/#ugc-image-upload
      description: Write access to user-provided images.
      userDescription: Upload images to Spotify on your behalf.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-upload-custom-playlist-cover
        api: web-api
        endpoint: endpoint-upload-custom-playlist-cover
    user-follow-modify:
      id: user-follow-modify
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-follow-modify
      description: Write/delete access to the list of artists and other users that
        the user follows.
      userDescription: Manage who you are following.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-artists-users
        api: web-api
        endpoint: endpoint-follow-artists-users
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-artists-users
        api: web-api
        endpoint: endpoint-unfollow-artists-users
    user-follow-read:
      id: user-follow-read
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-follow-read
      description: Read access to the list of artists and other users that the user
        follows.
      userDescription: Access your followers and who you are following.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-current-user-follows
        api: web-api
        endpoint: endpoint-check-current-user-follows
      - url: https://developer.spotify.com/documentation/web-api/#endpoint-get-followed
        api: web-api
        endpoint: endpoint-get-followed
    user-library-modify:
      id: user-library-modify
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-library-modify
      description: Write/delete access to a user's "Your Music" library.
      userDescription: Manage your saved content.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-albums-user
        api: web-api
        endpoint: endpoint-remove-albums-user
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-user
        api: web-api
        endpoint: endpoint-remove-tracks-user
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-episodes-user
        api: web-api
        endpoint: endpoint-remove-episodes-user
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-albums-user
        api: web-api
        endpoint: endpoint-save-albums-user
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-tracks-user
        api: web-api
        endpoint: endpoint-save-tracks-user
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-episodes-user
        api: web-api
        endpoint: endpoint-save-episodes-user
    user-library-read:
      id: user-library-read
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-library-read
      description: Read access to a user's library.
      userDescription: Access your saved content.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-albums
        api: web-api
        endpoint: endpoint-check-users-saved-albums
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-tracks
        api: web-api
        endpoint: endpoint-check-users-saved-tracks
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-albums
        api: web-api
        endpoint: endpoint-get-users-saved-albums
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-tracks
        api: web-api
        endpoint: endpoint-get-users-saved-tracks
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-episodes
        api: web-api
        endpoint: endpoint-check-users-saved-episodes
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-episodes
        api: web-api
        endpoint: endpoint-get-users-saved-episodes
    user-modify-playback-state:
      id: user-modify-playback-state
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-modify-playback-state
      description: Write access to a user’s playback state
      userDescription: Control playback on your Spotify clients and Spotify Connect
        devices.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-pause-a-users-playback
        api: web-api
        endpoint: endpoint-pause-a-users-playback
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-seek-to-position-in-currently-playing-track
        api: web-api
        endpoint: endpoint-seek-to-position-in-currently-playing-track
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-repeat-mode-on-users-playback
        api: web-api
        endpoint: endpoint-set-repeat-mode-on-users-playback
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-volume-for-users-playback
        api: web-api
        endpoint: endpoint-set-volume-for-users-playback
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-next-track
        api: web-api
        endpoint: endpoint-skip-users-playback-to-next-track
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-previous-track
        api: web-api
        endpoint: endpoint-skip-users-playback-to-previous-track
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-start-a-users-playback
        api: web-api
        endpoint: endpoint-start-a-users-playback
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-toggle-shuffle-for-users-playback
        api: web-api
        endpoint: endpoint-toggle-shuffle-for-users-playback
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-transfer-a-users-playback
        api: web-api
        endpoint: endpoint-transfer-a-users-playback
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-seek-to-position-in-currently-playing-track
        api: web-api
        endpoint: endpoint-seek-to-position-in-currently-playing-track
    user-read-currently-playing:
      id: user-read-currently-playing
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-read-currently-playing
      description: Read access to a user’s currently playing content.
      userDescription: Read your currently playing content.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recently-played
        api: web-api
        endpoint: endpoint-get-recently-played
    user-read-email:
      id: user-read-email
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-read-email
      description: Read access to user’s email address.
      userDescription: Get your real email address.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile
        api: web-api
        endpoint: endpoint-get-current-users-profile
    user-read-playback-position:
      id: user-read-playback-position
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-read-playback-position
      description: Read access to a user’s playback position in a content.
      userDescription: Read your position in content you have played.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-episode
        api: web-api
        endpoint: endpoint-get-an-episode
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-episodes
        api: web-api
        endpoint: endpoint-get-multiple-episodes
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-show
        api: web-api
        endpoint: endpoint-get-a-show
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-shows
        api: web-api
        endpoint: endpoint-get-multiple-shows
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-shows-episodes
        api: web-api
        endpoint: endpoint-get-a-shows-episodes
    user-read-playback-state:
      id: user-read-playback-state
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-read-playback-state
      description: Read access to a user’s player state.
      userDescription: Read your currently playing content and Spotify Connect devices
        information.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-users-available-devices
        api: web-api
        endpoint: endpoint-get-a-users-available-devices
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback
        api: web-api
        endpoint: endpoint-get-information-about-the-users-current-playback
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recently-played
        api: web-api
        endpoint: endpoint-get-recently-played
    user-read-private:
      id: user-read-private
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-read-private
      description: Read access to user’s subscription details (type of user account).
      userDescription: Access your subscription details.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-search
        api: web-api
        endpoint: endpoint-search
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile
        api: web-api
        endpoint: endpoint-get-current-users-profile
    user-read-recently-played:
      id: user-read-recently-played
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-read-recently-played
      description: Read access to a user’s recently played tracks.
      userDescription: Access your recently played items.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-the-users-currently-playing-track
        api: web-api
        endpoint: endpoint-get-the-users-currently-playing-track
    user-top-read:
      id: user-top-read
      link: https://developer.spotify.com/documentation/general/guides/scopes/#user-top-read
      description: Read access to a user's top artists and tracks.
      userDescription: Read your top artists and content.
      endpoints:
      - url: https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks
        api: web-api
        endpoint: endpoint-get-users-top-artists-and-tracks
